# Copyright 2021 Stuart Shelton
# Distributed under the terms of the GNU General Public License v2

# A note on ordering:
#
# podman_memory_size, PN, PV, CATEGORY, and optionally container_svc_pid and
# command_opts as well as any container_dir* entries should be set before
# this script is sourced.
#
# dockeropts, dockermounts, dockervolumes, etc. should all be set after, as
# should any any changes to startstopdaemon's command_args variable.


# We can't do this without arrays, so we need bash...
#shellcheck shell=bash

set -o pipefail >/dev/null 2>&1 || :

case "${podman_memory_size:-}" in
	# Set swap for memory sizes over 1GB to be sqrt(MEMORY_LIMIT), rounded
	# up...
	pico)
		# Pico
		: "${PODMAN_MEMORY_RESERVATION:="16m"}"
		: "${PODMAN_MEMORY_LIMIT:="32m"}"
		#: "${PODMAN_SWAP_LIMIT:="1g"}"
		;;
	nano)
		# Nano
		: "${PODMAN_MEMORY_RESERVATION:="32m"}"
		: "${PODMAN_MEMORY_LIMIT:="64m"}"
		#: "${PODMAN_SWAP_LIMIT:="1g"}"
		;;
	micro)
		# Micro
		: "${PODMAN_MEMORY_RESERVATION:="128m"}"
		: "${PODMAN_MEMORY_LIMIT:="256m"}"
		#: "${PODMAN_SWAP_LIMIT:="1g"}"
		;;
	tiny)
		# Tiny
		: "${PODMAN_MEMORY_RESERVATION:="256m"}"
		: "${PODMAN_MEMORY_LIMIT:="512m"}"
		#: "${PODMAN_SWAP_LIMIT:="1g"}"
		;;
	small)
		# Small
		: "${PODMAN_MEMORY_RESERVATION:="512m"}"
		: "${PODMAN_MEMORY_LIMIT:="1g"}"
		#: "${PODMAN_SWAP_LIMIT:="2g"}"
		;;
	medium)
		# Medium
		: "${PODMAN_MEMORY_RESERVATION:="1g"}"
		: "${PODMAN_MEMORY_LIMIT:="2g"}"
		#: "${PODMAN_SWAP_LIMIT:="3g"}"
		;;
	large)
		# Large
		: "${PODMAN_MEMORY_RESERVATION:="2g"}"
		: "${PODMAN_MEMORY_LIMIT:="4g"}"
		#: "${PODMAN_SWAP_LIMIT:="6g"}"
		;;
	xl|extra-large)
		# Extra-Large
		: "${PODMAN_MEMORY_RESERVATION:="4g"}"
		: "${PODMAN_MEMORY_LIMIT:="8g"}"
		#: "${PODMAN_SWAP_LIMIT:="11g"}"
		;;
	'')
		: ;;
	*)
		ewarn "Unknown memory profile '${podman_memory_size}'"
		;;
esac
: "${PODMAN_SWAP_LIMIT:="${PODMAN_MEMORY_LIMIT}"}"

command='docker'
if type -pf podman >/dev/null; then
	command='podman'
	docker() {
		test "${1:-}" = 'rm' && trap '' INT ;
		podman ${@+"${@}"} ;
		trap - INT ;
	} # docker
	export -f docker
fi
docker --version >/dev/null || exit 127

if [ -r /etc/containers/storage.conf ] &&
		sed 's/#.*//' /etc/containers/storage.conf |
			grep -q "driver\s*=\s*['\"]overlay['\"]"
then
	if [ -r /proc/filesystems ] && ! grep -q -- 'overlay' /proc/filesystems; then
		# We should really check that the 'overlay' driver is actually in use
		# here... but this is a sensible and reasonably harmless default
		ebegin "Attempting to load 'overlay' kernel module"
		modprobe overlay >/dev/null 2>&1
		eend ${?} "Module load failed"
	fi
fi

#RC_SVCNAME=''            # Set by OpenRC
#PN=''                    # Package name
#PNV=''                   # Name variant (where $RC_SVCNAME differs from $PN)
#PV=''                    # Package version
#CATEGORY=''              # Package category
#container_entrypoint=''  # Override container entry-point
#command_opts=''          # Command-line arguments for ${RC_SVCNAME}

if
	[ -z "${RC_SVCNAME:-}" ] || [ -z "${PN:-}" ] ||
	[ -z "${PV:-}" ] || [ -z "${CATEGORY:-}" ]
then
	eerror "Essential variables unset - aborting"
	return 1
fi

dockerimage="${dockerimage-"service.${CATEGORY}.${PN}:${PV}"}"
container_name="${container_name-"openrc-${PNV:-"${PN}"}-${PV}"}"
dockeropts+=(
	#--log-level debug

	--cap-drop ALL

	${PODMAN_MEMORY_RESERVATION:+--memory-reservation ${PODMAN_MEMORY_RESERVATION}}
	${PODMAN_MEMORY_LIMIT:+--memory ${PODMAN_MEMORY_LIMIT}}
	${PODMAN_SWAP_LIMIT:+--memory-swap ${PODMAN_SWAP_LIMIT}}

	# Prevents containers from being stopped by sending signals to podman
	#--init

	#--interactive
	--name "${container_name}"
	--restart on-failure
	#--rm
	--tty
)
dockernetwork+=(
	# "Port mappings have been discarded as one of the Host, Container,
	#  Pod, and None network modes are in use"
	#--network host
)

#shellcheck disable=SC2034
{
if [ -e /var/run/syslog-ng/log ]; then
	dockermount_syslog='--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log'
elif [ -e /var/run/metalog/log ]; then
	dockermount_syslog='--mount type=bind,source=/var/run/metalog/log,destination=/dev/log'
fi
dockermount_etc="--mount type=bind,source=/etc/${PN}/,destination=/etc/${PN}/"
dockermount_lib="--mount type=bind,source=/var/lib/${PN},destination=/var/lib/${PN}"
dockermount_log="--mount type=bind,source=/var/log/${PN},destination=/var/log/${PN}"
dockermount_run="--mount type=bind,source=/var/run/${PN},destination=/var/run/${PN}"
dockermount_ssl="--mount type=bind,source=/etc/ssl/,destination=/etc/ssl/,ro=true"
dockermount_defaults=(
	"${dockermount_syslog}"
	"${dockermount_etc},ro=true"
	"${dockermount_lib}"
	"${dockermount_log}"
	"${dockermount_run}"
)

dockervolumes_hugetlb='--volume /dev/hugetlb:/dev/hugepages'
dockervolumes_hugetlb1gb='--volume /dev/hugetlb1gb:/dev/hugepages'

# Used in _containers_check_paths, which can be called from multiple places
container_dir_owner="${container_dir_owner-root}"
container_dir_run_mode="${container_dir_run_mode-0755}"
container_dir_run_owner="${container_dir_run_owner-${container_dir_owner}}"
container_dir_run_group="${container_dir_run_group-${container_dir_run_owner}}"
container_dir_run="${container_dir_run-/var/run/${PN}}"
container_dir_log_mode="${container_dir_log_mode-0755}"
container_dir_log_owner="${container_dir_log_owner-${container_dir_owner}}"
container_dir_log_group="${container_dir_log_group-${container_dir_log_owner}}"
container_dir_log="${container_dir_log-/var/log/${PN}}"
container_dir_lib_mode="${container_dir_lib_mode-0755}"
container_dir_lib_owner="${container_dir_lib_owner-${container_dir_owner}}"
container_dir_lib_group="${container_dir_lib_group-${container_dir_lib_owner}}"
#container_dir_lib="${container_dir_lib-/var/lib/${PN}}"
container_dir_lib="${container_dir_lib:-}"
# Used in %PID% expansion, _containers_start_pre, _containers_start_post, _containers_stop_post
container_svc_pid="${container_svc_pid-${container_dir_run-/var/run/${PN}}/${RC_SVCNAME}.pid}"

#command_user='root:root'
command_background="true"
start_stop_daemon_wait=1000
start_stop_daemon_args="$( echo "--wait ${start_stop_daemon_wait}" \
	"--stdout /var/log/${PN}/${command%% *}-${PNV:-"${RC_SVCNAME}"}.log" \
	"--stderr /var/log/${PN}/${command%% *}-${PNV:-"${RC_SVCNAME}"}.log" )"
pidfile="/var/run/containers/${RC_SVCNAME}.pid"

container_stop_timeout=31
# Default 'podman stop' timeout is 10 seconds...
#retry='TERM/11/KILL/2'
retry="TERM/$(( container_stop_timeout + 1 ))/KILL/2"

name="containerised ${RC_SVCNAME}"
#description=''
#description_healthcheck=''
#description_unhealthy=''
#description_cgroup_cleanup='Kill all processes in the cgroup'
}

_containers_depend() {
	need containers
	use podman docker
} # containers_depend
export -f _containers_depend

_containers_set_args() {
	# Allow substitutions on $command_opts
	#shellcheck disable=SC2206
	command_docker_args=(
		${dockeropts[@]:-}
		${container_entrypoint:+--entrypoint ${container_entrypoint}}
		${dockermounts[@]:-}
		${dockervolumes[@]:-}
	)
	command_docker_net_args=(
		${dockernetwork[@]:-}
		${dockerports[@]:-}
	)
	command_docker_pid_args=(
		--conmon-pidfile "${pidfile%.pid}.conmon.pid"
		--cidfile "${pidfile%.pid}.cid"

		# New with podman-3.2.0, we could use:
		#--pidfile="${pidfile%.pid}.init.pid"
		# ... to record the host PID of the container's PID 1.  We are
		# determining this PID ourselves with logic below, which _may_
		# give better tracking in the event of a non-clean startup.
	)
	command_docker_daemon_args=(
		--image-volume tmpfs
		--sdnotify conmon
		--systemd false
	)
	#shellcheck disable=SC2034,SC2116,SC2154
	command_args="run $( # <- Syntax
		echo "${command_docker_args[*]:-}" \
			"${command_docker_net_args[*]:-}" \
			"${command_docker_pid_args[*]:-}" \
			"${command_docker_daemon_args[*]:-}" \
			"localhost/${dockerimage}" \
			"${command_opts:+${command_opts/\%PID\%/${container_svc_pid}}}"
	)"

	return 0
} # _containers_set_args

_containers_check_paths() {
	set -u

	checkpath --directory \
			--mode 0755 \
			--owner root:root \
			--quiet \
		"$( dirname "${pidfile}" )" || return ${?}

	if [ -n "${container_dir_run:-}" ]; then
		if service_started || service_starting; then
			checkpath --directory \
					--mode "${container_dir_run_mode}" \
					--owner "${container_dir_run_owner}:${container_dir_run_group}" \
					--quiet \
				"${container_dir_run}" || return ${?}
		else # inactive stopping stopped coldplugged wasinactive
			checkpath --directory-truncate \
					--mode "${container_dir_run_mode}" \
					--owner "${container_dir_run_owner}:${container_dir_run_group}" \
					--quiet \
				"${container_dir_run}" || return ${?}
		fi
	fi
	if [ -n "${container_dir_log:-}" ]; then
		checkpath --directory \
				--mode "${container_dir_log_mode}" \
				--owner "${container_dir_log_owner}:${container_dir_log_group}" \
				--quiet \
			"${container_dir_log}" || return ${?}
	fi
	if [ -n "${container_dir_lib:-}" ]; then
		checkpath --directory \
				--mode "${container_dir_lib_mode}" \
				--owner "${container_dir_lib_owner}:${container_dir_lib_group}" \
				--quiet \
			"${container_dir_lib}" || return ${?}
	fi

	set +u

	return 0
} # _containers_check_paths

_containers_inspect() {
	local id='' filter=''

	filter="name=${container_name_root:-"${container_name}"}-inspect"
	id="$( # <- Syntax
		docker ps -a \
			--filter "${filter}" \
			--format '{{.ID}}' 2>/dev/null
	)"
	if [ -n "${id}" ]; then
		einfo "Removing container and values with ID '${id}' (${filter}) ..."
		docker rm --volumes "${id}" >/dev/null 2>&1
	else
		ewarn "Not removing any previous container"
	fi

	einfo "Launching image 'localhost/${dockerimage}' as '${container_name_root:-"${container_name}"}-inspect' ..."
	docker --log-level=info run "${command_docker_args[@]:-}" \
			--entrypoint=/bin/sh \
			--interactive \
			--name "${container_name_root:-"${container_name}"}-inspect" \
			--network host \
			--replace \
			--restart no \
			--rm \
		"localhost/${dockerimage}"

	veinfo "exit(${?})"
} # _containers_inspect

_containers_git_commit_changes() {
	local container_dir_etc="${container_dir_etc-/etc/${PN}}"
	local container_use_git="${container_use_git-0}"
	local git=''

	if [ -n "${container_use_git:-}" ] && [ "${container_use_git}" != "0" ]; then
		type -pf git >/dev/null 2>&1 && git="git"
	fi
	if [ -d "${container_dir_etc}/.git" ] && [ -n "${git:-}" ]; then
		if ! [ -s "${container_dir_etc}/.gitignore" ]; then
			cat >> "${container_dir_etc}/.gitignore" <<-EOF
				**/._cfg[0-9][0-9][0-9][0-9]_*
				**/.keep*
				**/.*.sw[a-p]
			EOF
			if [ -n "${container_git_ignore:-}" ]; then
				cat >> "${container_dir_etc}/.gitignore" <<-EOF
					${container_git_ignore}
				EOF
			fi
		fi
		pushd "${container_dir_etc}" >/dev/null 2>&1 &&
			git status 2>/dev/null |
			grep -Eq '^(Untracked files:$|\s+(deleted|modified|new file):\s+)' &&
			einfo "Committing configuration changes to git" &&
			git add --all . >/dev/null 2>&1 &&
			git status |
			tail -n +4 &&
			git commit -m "Record changes on ${RC_SVCNAME} start" >/dev/null 2>&1
		popd >/dev/null 2>&1 || :
	fi
} # _containers_git_commit_changes

_containers_start_pre() {
	local id=''

	set -u

	if
		! docker image ls "localhost/${dockerimage}" 2>/dev/null |
		grep -Fq -- 'localhost'
	then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi
	if [ -e "${pidfile%.pid}.cid" ]; then
		ewarn "Stale Container ID file '${pidfile%.pid}.cid' still" \
			"exists - removing..."
		rm -f "${pidfile%.pid}.cid"
	fi

	_containers_git_commit_changes

	id="$( docker ps -a --filter "name=${container_name}" --format '{{.ID}}' 2>/dev/null )"
	if [ -n "${id:-}" ]; then
		veinfo "Attempting to remove old '${container_name}' container '${id}' ..."
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	# This should have been cleared by checkpath's 'directory-truncate'...
	test ! -e "${container_svc_pid:-}" || rm "${container_svc_pid}"

	set +u

	return 0
} # _containers_start_pre

_containers_start_post() {
	local container_svc_wait="${container_svc_wait-5}"
	local container_use_pid="${container_use_pid-1}"

	set -u

	local -i wait=${container_svc_wait}
	local -i expect_pid=${container_use_pid}
	local -i factor=1 count=0 oldpid=0 pid=0 have_pid=0
	local sleep='1'
	local pid_file="${container_svc_pid:-}"
	local pid_dir="${container_svc_pid_dir:-}"

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( factor = 10 ))
		: $(( wait = wait * factor ))
	fi

	if [ $(( expect_pid )) -eq 1 ]; then
		while [ ! -s "${pid_file}" ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( count = count + 1 ))
		done
		if ! [ -s "${pid_file}" ]; then
			eerror "Timed-out waiting for '${PN}' PID in file '${pid_file}'"
		else
			service_set_value 'startup_ticks' "${count}"
			service_set_value 'startup_factor' "${factor}"
			have_pid=1
		fi
	else
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( pid = $( docker inspect \
					--format '{{.State.Pid}}' \
				"${container_name}" 2>/dev/null || echo '0'
			) + 0 ))
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for '${PN}'" \
				"from container '${container_name}'" \
				"(got '${pid}')"
		else
			if [ "$( ps --pid $(( pid )) -ho comm )" = 'init' ]; then
				: $(( pid = $( ps --ppid $(( pid )) -ho pid ) ))
			fi
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving ${PN} PID '${pid}' ..."
				if [ -n "${pid_dir:-}" ]; then
					echo "${pid}" > "${pid_dir}/${RC_SVCNAME}.pid"
				else
					#shellcheck disable=SC2174
					mkdir -pm "${container_dir_run_mode}" \
						"$( dirname "${pid_file}" )"
					echo "${pid}" > "${pid_file}"
				fi
			else
				oldpid="$( awk '{ print $1 }' < "${pid_file}" )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${PN} PID from '${oldpid}' to '${pid}' ..."
					if [ -n "${pid_dir:-}" ]; then
						echo "${pid}" > "${pid_dir}/${RC_SVCNAME}.pid"
					else
						echo "${pid}" > "${pid_file}"
					fi
				fi
				unset oldpid
			fi
		fi
	fi

	set +u

	return 0
} # _containers_start_post

_containers_format_memory() {
	local selector="${1:-}"
	local file="${2:-}"

	[[ -n "${selector:-}" && -n "${file:-}" ]] || return 1
	# We can't use 'test -s' on status files, which all report size==0...
	[[ -f "${file}" && -r "${file}" ]] || return 2

	grep -F "${selector}" "${file}" |
		awk '( "kB" == $3 ) { $2 /= 1024 ; printf "%.2fMB\n", $2 }'
} # _containers_format_memory

_containers_status() {
	local output='einfo' entry='' file=''
	local -i status=0

	default_status || status=${?}

	if [ 'YES' = "${EINFO_QUIET:-}" ]; then
		return ${status}
	fi

	if (( status )); then
		output='ewarn'
	else
		status_host_pid="$( cat "${pidfile}" 2>/dev/null )" ||
			eerror "Unable to read host PID '${pidfile}': ${?}"
		status_container_pid="$( # <- Syntax
			cat "${container_svc_pid:-}" 2>/dev/null |
				awk '{ print $1 }'
		)" ||
			eerror "Unable to read container PID" \
				"'${status_container_pid:-}': ${?}"
		if
			[ "${status_host_pid:-1}" = '1' ] ||
			[ "${status_container_pid:-1}" = '1' ]
		then
			output='eerror'
		fi
		$output "${RC_SVCNAME}:" \
			"podman PID '${status_host_pid:-"unknown"}'," \
			"host PID '${status_container_pid:-"unknown"}'"
		if (( status_container_pid > 300 )); then
			if ! [[ -d "/proc/${status_container_pid}" ]]; then
				eerror "Cannot locate PID directory" \
					"'/proc/${status_container_pid}'"
			elif ! [[ -r "/proc/${status_container_pid}/status" ]]; then
				eerror "Cannot read PID status from" \
					"'/proc/${status_container_pid}/status'"
			else
				file="/proc/${status_container_pid}/status"
				$output "${RC_SVCNAME//?/ }  Peak memory usage $( # <- Syntax
					_containers_format_memory 'VmPeak' \
						"${file}"
				), Peak resident-set size $( # <- Syntax
					_containers_format_memory 'VmHWM' \
						"${file}"
				), Swap usage $( # <- Syntax
					_containers_format_memory 'VmSwap' \
						"${file}"
				)"
				unset file
			fi
		fi
		unset status_container_pid status_host_pid
	fi

	if [ $(( $( id -u ) )) -ne 0 ]; then
		return ${status}
	fi

	if
		! docker image ls "localhost/${dockerimage}" 2>/dev/null |
		grep -Fq -- 'localhost'
	then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	entry="$( docker ps -a \
		--filter "name=${container_name}" \
		--format '{{.ID}}!{{.ImageID}}!{{.Status}}!{{.CreatedAt}}!{{.RunningFor}}!{{.Mounts}}!{{.Labels}}'
		#--format '{{.ID}}!{{.ImageID}}!{{.Status}}!{{.CreatedAt}}!{{.RunningFor}}!{{.Size}}!{{.Mounts}}!{{.Labels}}'
		#--size \
	)"
	if [ -z "${entry:-}" ]; then
		eerror "podman has no data on container '${container_name}'"
	else
		local id image state created running mounts labels # size
		local -i factor=1 ticks=0
		while IFS='!' read -r id image state created running mounts labels; do # size
			state="$( cut -d' ' -f 1 <<<"${state:-}" )"
			created="$( cut -d'.' -f 1 <<<"${created:-}" | awk '{ print $2, $1 }' )"
			labels="$( sed 's/^map\[// ; s/\]$//' <<<"${labels}" )"
			mounts="$( sed 's/^\[// ; s/\]$//' <<<"${mounts}" )"
			running="${running% ago}"
			if [ "${state:-}" != 'Up' ]; then
				output='eerror'
			fi
			$output ''
			$output "Image:  ${image:--}, ID: ${id:--}: (${state:-Unknown})${created:+ created ${created}}${running:+ running for ${running,,}}"
			if [ -n "$( service_get_value 'startup_factor' )" ] && [ -n "$( service_get_value 'startup_ticks' )" ]; then
				: $(( factor = $( service_get_value 'startup_factor' ) ))
				: $(( ticks = $( service_get_value 'startup_ticks' ) ))
				case ${factor} in
					1)	$output "        PID file appeared in ${ticks} seconds" ;;
					10)	$output "        PID file appeared in ${ticks} deciseconds ($(( ticks / factor )) seconds)" ;;
					*)	$output "        PID file appeared in ${ticks} ticks (factor ${factor})" ;;
				esac
			fi
			#$output "Size:   ${size}"
			if [ -n "${labels:-}" ]; then
				$output ''
				local part='' label='' value='' tab=$'\t'
				local -i first=1
				for part in ${labels}; do
					case "${part}" in
						*:*)
							if [ -n "${label:-}" ] && [ -n "${value:-}" ]; then
								if (( first )); then
									first=0
									$output "Labels: ${label}:${tab}'${value}'"
								else
									$output "        ${label}:${tab}'${value}'"
								fi
							fi
							label="$( cut -d':' -f 1 <<<"${part}" )"
							value="$( cut -d':' -f 2- <<<"${part}" )"
							;;
						*)
							value+=" ${part}"
							;;
					esac
				done
				if [ -n "${label:-}" ] && [ -n "${value:-}" ]; then
					$output "        ${label}:${tab}'${value}'"
				fi
				unset first tab value label part
			fi
			if [ -n "${mounts:-}" ]; then
				local mount=''
				local -i first=1
				$output ''
				echo "${mounts}" | xargs -n 1 echo | sort -V | while read -r mount; do
					if (( first )); then
						first=0
						$output "Mounts: ${mount}"
					else
						$output "        ${mount}"
					fi
				done
				unset first mount
			fi
		done <<<"${entry}"
		unset labels mounts running created state image id
	fi

	return ${status}
} # _containers_status

_containers_reload() {
	local container_svc_wait="${container_svc_wait-5}"
	local container_change_pid="${container_change_pid-0}"

	set -u

	local -i wait=${container_svc_wait}
	local -i count=0 oldpid=0 pid=0 have_pid=0 rc=0
	local sleep='1'
	local pid_file="${container_svc_pid:-}"

	if ! service_started "${RC_SVCNAME}" ; then
		eerror "${RC_SVCNAME} isn't running"
		return 1
	fi

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	# N.B. oldpid should be the host PID, not the PID within the container...
	if [ -s "${pid_file}" ]; then
		: $(( oldpid = $( awk '{ print $1 }' < "${pid_file}" ) ))
	fi 2>/dev/null
	if [ -z "${oldpid:-}" ] || [ $(( oldpid )) -lt 301 ]; then
		: $(( oldpid = 0 ))
		if [ $(( container_change_pid )) -eq 1 ]; then
			if ! echo '0' > "${pid_file}"; then
				eerror "Unable to overwrite PID file '${pid_file}'"
				return 1
			fi
		fi
	fi

	ebegin "Reloading ${RC_SVCNAME} configuration"
	# Warning: reload causes the PID of some services to change, but
	# then re-written by the service after a short delay...
	: $(( pid = oldpid ))
	if [ $(( pid )) -gt 300 ]; then
		kill -HUP "${pid}"
	else
		: $(( pid = $( # <- Syntax
			docker inspect \
					--format '{{.State.Pid}}' \
				"${container_name}" 2>/dev/null || echo '0'
		) + 0 ))
		if [ $(( pid )) -gt 300 ]; then
			kill -HUP "${pid}"
		else
			eend 1 "Cannot determine PID for service '${RC_SVCNAME}'"
			return 1
		fi
	fi
	rc=${?}
	eend ${rc}

	if [ $(( container_change_pid )) -ne 1 ]; then
		set +u

		return ${rc}
	fi

	pid=0

	while [ $(( oldpid )) -eq "$( # <- Syntax
		awk '{ print $1 }' < "${pid_file}" || echo '0'
	)" ] && [ $(( count )) -lt $(( wait )) ]; do
		sleep ${sleep}
		: $(( count = count + 1 ))
	done 2>/dev/null

	if [ $(( oldpid )) -eq "$( # <- Syntax
		awk '{ print $1 }' < "${pid_file}" || echo '0'
	)" ]; then
		eerror "Timed-out waiting for reloaded '${RC_SVCNAME}' PID in file '${pid_file}'"
	else
		veinfo "Service '${RC_SVCNAME}' changed from host PID" \
			"'${oldpid}' to container PID $( # <- Syntax
				awk '{ print $1 }' < "${pid_file}" || echo '0'
			)"
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( pid = $( docker inspect \
					--format '{{.State.Pid}}' \
				"${container_name}"
			) ))
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for reloaded" \
				"service '${RC_SVCNAME}' from container" \
				"'${container_name}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving updated ${RC_SVCNAME} PID" \
					"'${pid}' to '${pid_file}' ..."
				echo "${pid}" > "${pid_file}"
			else
				: $(( oldpid = $( # <- Syntax
					awk '{ print $1 }' < "${pid_file}" ||
					echo '0'
				) + 0 ))
				if ! [ $(( oldpid )) -eq "${pid}" ]; then
					vewarn "Correcting ${RC_SVCNAME} PID" \
						"from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_file}"
				fi
				unset oldpid
			fi
		fi
	fi

	set +u

	return 0
} # _containers_reload

_containers_stop_post() {
	local id=''
	local -i pid=0

	set -u

	id="$( # <- Syntax
		docker ps \
				--filter "name=${container_name}" \
				--format '{{.ID}}' \
			2>/dev/null
	)"
	if [ -n "${id:-}" ]; then
		docker stop \
				--ignore \
				--time "${container_stop_timeout-10}" \
			"${id}" >/dev/null
	fi

	if [ "${RC_CMD:-}" = 'restart' ] || [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		id="$( # <- Syntax
			docker ps \
					--all \
					--filter "name=${container_name}" \
					--format '{{.ID}}' \
				2>/dev/null
		)"
		if [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi

	if [ -s "${pidfile%.pid}.conmon.pid" ]; then
		pid="$( cat "${pidfile%.pid}.conmon.pid" 2>/dev/null )"
		if [ $(( pid )) -gt 300 ]; then
			if
				[ -e "/proc/${pid}/exe" ] &&
				readlink -e "/proc/${pid}/exe" |
					grep -q -- '/conmon$'
			then
				ewarn "monitor for service '${RC_SVCNAME}'" \
					"container still running as PID ${pid}"
			fi
		fi
	fi
	test ! -e "${pidfile%.pid}.conmon.pid" || rm "${pidfile%.pid}.conmon.pid"
	test ! -e "${pidfile%.pid}.cid" || rm "${pidfile%.pid}.cid"

	if [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		test ! -e "${container_svc_pid:-}" || rm "${container_svc_pid}"
	fi

	set +u

	return 0
} # _containers_stop_post

start_pre() {
	_containers_check_paths || return ${?}

	_containers_start_pre
} # start_pre

start_post() {
	_containers_start_post
} # start_post

status() {
	_containers_status
} # status

stop_post() {
	_containers_stop_post
} # stop_post

_containers_set_args

# vi: set colorcolumn=80 filetype=gentoo-init-d foldmarker=()\ {,}\ #\  foldmethod=marker:
