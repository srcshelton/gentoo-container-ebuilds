#!/sbin/openrc-run
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

: ${MY_CNF:=/etc/${RC_SVCNAME}/my.cnf}
: ${STARTUP_TIMEOUT:=900}
: ${STARTUP_EARLY_TIMEOUT:=1000}
: ${STOP_TIMEOUT:=120}

get_config() {
	my_print_defaults --defaults-file="$1" mysqld server mariadb |
		sed -n -e "s/^--$2=//p"
}

mysql_svcname() {
	local ebextra=
	case "${RC_SVCNAME}" in
		mysql*) ;;
		*) ebextra=" (mysql)" ;;
	esac
	echo "${RC_SVCNAME}${ebextra}"
}

stringContain() { [ -z "${2##*$1*}" ] && [ -z "$1" -o -n "$2" ]; }

command="docker"
if type -pf podman >/dev/null; then
	command="podman"
	docker() { [ "${1:-}" = 'rm' ] && trap '' INT ; podman ${@+"${@}"} ; trap  - INT ; }
	export -f docker
fi

PN='mariadb' # PN="${RC_SVCNAME:=mysql}"
PV='@PVR@'
CATEGORY='dev-db'
dockeropts=(
	#--log-level debug
	--cap-drop ALL

	--volume /dev/hugetlb1gb:/dev/hugetlb

	--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log
	--mount type=bind,source=/etc/mysql/,destination=/etc/mysql/,ro=true
	--mount type=bind,source=/etc/ssl/,destination=/etc/ssl/,ro=true
	--mount type=bind,source=$( readlink -e /var/lib/mysql/ ),destination=/var/lib/mysql
	--mount type=bind,source=/var/log/mysql/,destination=/var/log/mysql
	--mount type=bind,source=/var/run/mysqld/,destination=/var/run/mysqld

	--network host
	# "Port mappings have been discarded as one of the Host, Container, Pod, and None network modes are in use"
	#--publish 3306:3306/tcp

	--interactive
	--name "openrc-${PN}-${PV}"
	--restart on-failure
	#--rm
	--tty
)
dockerimage="service.${CATEGORY}.${PN}:${PV}"

name="containerised $( mysql_svcname )"
command_args="--log-level=info run ${dockeropts[@]} ${dockerimage} --defaults-file=\"${MY_CNF}\"${MY_ARGS:+ ${MY_ARGS}}"
command_background='true'
#command_user='mysql:mysql'
start_stop_daemon_args="--wait ${STARTUP_EARLY_TIMEOUT} --stdout /var/log/${RC_SVCNAME}/${command}-${RC_SVCNAME}.log --stderr /var/log/${RC_SVCNAME}/${command}-${RC_SVCNAME}.log ${DEBUG:+--verbose} ${NICE:+--nicelevel ${NICE}} ${IONICE:+--ionice ${IONICE}}"
retry="${STOP_TIMEOUT}"
pidfile="/var/run/containers/${RC_SVCNAME}.pid"

extra_commands="checkconfig"
extra_started_commands="check reload upgrade"
extra_stopped_commands="bootstrap_galera init_mysql_database"
description_checkconfig="Verify the server's configuration"
description_check="Run mysqlcheck against running database instance"
description_reload="Reload the grant tables and flush tables, logs, thread, and host cache"
description_upgrade="Run mysql_upgrade against running database instance"
description_bootstrap_galera="Start a new Galera cluster with this server as the initial node"
description_init_mysql_database="Initialise a new, blank system database"
description="An enhanced, drop-in replacement for MySQL"

required_files="${MY_CNF}"

depend() {
	use net.lo
	# localmount needed for $basedir
	need containers
	# This service has its own timeout and may need to wait for repairs
	# or remote synchronization
	keyword -timeout
}

_checkpaths() {
	checkpath --directory --mode 0755 --owner root:root --quiet "$( dirname "${pidfile}" )" || return 1

	local mysqld_pidfile="$( get_config "${MY_CNF}" 'pid[_-]file' | tail -n 1 )"
	if [[ -z "${mysqld_pidfile:-}" || "${mysqld_pidfile}" == '/' ]]; then
		eerror "Could not determine $( mysql_svcname ) PID file location"
		return 1
	fi

	if service_started || service_starting; then
		checkpath --directory --mode 0755 --owner mysql:mysql --quiet "$( dirname "${mysqld_pidfile}" )" || return 1
	else
		checkpath --directory-truncate --mode 0755 --owner mysql:mysql --quiet "$( dirname "${mysqld_pidfile}" )" || return 1
	fi
	checkpath --directory --mode 0750 --owner mysql:mysql --quiet "/var/log/mysql" || return 1

	# /var/lib/mysql may have been relocated to a volume with more space
	# available...
	local datadir=''
	datadir="$( readlink -m "/var/lib/mysql" )"
	checkpath --directory --mode 0750 --owner mysql:mysql --quiet "${datadir:-/var/lib/mysql}" || return 1
}

checkconfig() {
	local my_cnf="${MY_CNF:-/etc/${RC_SVCNAME}/my.cnf}"
	local basedir="$( get_config "${my_cnf}" basedir | tail -n 1 )"
	local svc_name="$( mysql_svcname )"

	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	_checkpaths || return 1

	ebegin "Checking mysqld configuration for ${svc_name}"

	if [ ${RC_CMD} = "checkconfig" ] ; then
		# We are calling checkconfig specifically.  Print warnings
		# regardless.
		if service_started; then
			docker exec "openrc-${PN}-${PV}" \
				mysqld --defaults-file="${my_cnf}" --help --verbose > /dev/null
		else
			docker run "${dockeropts[@]}" \
					--cap-drop ALL \
					--network none \
					--name "openrc-${PN}-${PV}-checkconfig" \
					--replace \
					--restart no \
					--rm \
					--entrypoint="${basedir}"/sbin/mysqld \
				"${dockerimage}" --defaults-file="${my_cnf}" --help --verbose > /dev/null
		fi
	else
		# Suppress output to check the return value
		if service_started; then
			docker exec "openrc-${PN}-${PV}" \
				mysqld --defaults-file="${my_cnf}" --help --verbose > /dev/null 2>&1
		else
			docker run "${dockeropts[@]}" \
					--cap-drop ALL \
					--network none \
					--name "openrc-${PN}-${PV}-checkconfig" \
					--replace \
					--restart no \
					--rm \
					--entrypoint="${basedir}"/sbin/mysqld \
				"${dockerimage}" --defaults-file="${my_cnf}" --help --verbose > /dev/null 2>&1
		fi

		# If the above command does not return 0 then there is an error
		# to echo to the user
		if [ $(( $? )) -ne 0 ] ; then
			if service_started; then
				docker exec "openrc-${PN}-${PV}" \
					mysqld --defaults-file="${my_cnf}" --help --verbose > /dev/null
			else
				docker run "${dockeropts[@]}" \
						--cap-drop ALL \
						--network none \
						--name "openrc-${PN}-${PV}-checkconfig" \
						--replace \
						--restart no \
						--rm \
						--entrypoint="${basedir}"/sbin/mysqld \
					"${dockerimage}" --defaults-file="${my_cnf}" --help --verbose > /dev/null
			fi
		fi
	fi

	eend $? "${svc_name} config check failed"
}

check() {
	docker exec --interactive --tty "openrc-${PN}-${PV}" \
		mysqlcheck -A -u root -p
}

upgrade() {
	docker exec --interactive --tty "openrc-${PN}-${PV}" \
		mysql_upgrade -u root -p -vvvv
}

bootstrap_galera() {
	MY_ARGS="--wsrep-new-cluster ${MY_ARGS}"
	mark_service_starting
	if start ; then
		mark_service_started
		return 0
	else
		mark_service_stopped
		return 1
	fi
}

start_pre() {
	local git='' dir='/etc/mysql'

	# Check for old conf.d variables that mean migration was not yet done.
	set | egrep -sq '^(mysql_slot_|MYSQL_BLOG_PID_FILE|STOPTIMEOUT)'
	rc=$?
	# Yes, MYSQL_INIT_I_KNOW_WHAT_I_AM_DOING is a hidden variable.
	# It does have a use in testing, as it is possible to build a config
	# file that works with both the old and new init scripts simulateously.
	if [ "${rc}" = 0 -a -z "${MYSQL_INIT_I_KNOW_WHAT_I_AM_DOING}" ]; then
		eerror "You have not updated your conf.d for the new mysql-init-scripts-2 revamp."
		eerror "Not proceeding because it may be dangerous."
		return 1
	fi

	if [ ! -r "${MY_CNF}" ] ; then
		eerror "Cannot read $( mysql_svcname ) configuration file '${MY_CNF}'"
		return 1
	fi

	# Check the config or die
	if [ ${RC_CMD} != "restart" ] ; then
		checkconfig || return 1
	fi

	# tail -n1 is critical as these we only want the last instance of the
	# option
	local wsrep="$(get_config "${MY_CNF}" 'wsrep[_-]on' | tail -n1 | awk '{print tolower($0)}')"
	local wsrep_new=$(get_config "${MY_CNF}" 'wsrep-new-cluster' | tail -n1)

	# Galera: Only check datadir if not starting a new cluster and galera
	# is enabled,  wsrep_on is not on or wsrep-new-cluster exists in the
	# config or MY_ARGS
	[ "${wsrep}" = "1" ] && wsrep="on"
	if [ "${wsrep}" != "on" ] || [ -n "${wsrep_new}" ] || stringContain 'wsrep-new-cluster' "${MY_ARGS}" ; then
		local datadir=$(get_config "${MY_CNF}" datadir | tail -n1)
		if [ ! -d "${datadir}" ] ; then
			eerror "MySQL datadir '${datadir}' is empty or invalid"
			eerror "Please check your config file '${MY_CNF}'"
			return 1
		fi

		if [ ! -d "${datadir}"/mysql ] ; then
			eerror "System database '${datadir}/mysql' missing"

			# find which package is installed to report an error
			local EROOT=$(portageq envvar EROOT)
			local DBPKG_P=$(portageq match ${EROOT} $(portageq expand_virtual ${EROOT} virtual/mysql | head -n1))
			if [ -z ${DBPKG_P} ] ; then
				eerror "You don't appear to have a server package installed yet."
			else
				eerror "You don't appear to have the mysql database installed yet."
				eerror "Please run 'emerge --config =${DBPKG_P}' to have this done..."
			fi
			return 1
		fi
	fi

	if [ -n "${MYSQLD_USE_GIT:-}" ] && [ "${MYSQLD_USE_GIT}" != "0" ]; then
		type -pf git >/dev/null 2>&1 && git="git"
	fi
	if [ -d "${dir}/.git" ] && [ -n "${git:-}" ]; then
		if ! [ -s "${dir}/.gitignore" ]; then
			cat >> "${dir}/.gitignore" <<-EOF
				**/._cfg[0-9][0-9][0-9][0-9]_*
				**/.keep*
				**/.*.swp
			EOF
		fi
		pushd "${dir}/">/dev/null 2>&1 &&
			git status 2>/dev/null | grep -Eq '^(Untracked files:$|\s+(deleted|modified|new file):\s+)' &&
			einfo "Committing configuration changes to git" &&
			git add --all . >/dev/null 2>&1 &&
			git status | tail -n +4 &&
			git commit -m "Record changes on $( mysql_svcname ) start" >/dev/null 2>&1
		popd >/dev/null 2>&1
	fi

	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	local mysqld_pidfile="$( get_config "${MY_CNF}" 'pid[_-]file' | tail -n 1 )"

	# This should have been cleared by checkpath's 'directory-truncate'...
	[ -e "${mysqld_pidfile}" ] && rm "${mysqld_pidfile}" || :
}

start_post() {
	local mysqld_pidfile="$( get_config "${MY_CNF}" 'pid[_-]file' | tail -n 1 )"

	local -i wait=${STARTUP_EARLY_TIMEOUT} count=0 oldpid=0 pid=0 expect_pid=1 have_pid=0
	local sleep='1' pid_file="${mysqld_pidfile}"

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	if [ $(( expect_pid )) -eq 1 ]; then
		while [ ! -s "${pid_file}" ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( count = count + 1 ))
		done
		if ! [ -s "${pid_file}" ]; then
			eerror "Timed-out waiting for '${PN}' PID in file '${pid_file}'"
		else
			have_pid=1
		fi
	else
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
				: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			else
				: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			fi
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for '${PN}' from container 'openrc-${PN}-${PV}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving ${PN} PID '${pid}' ..."
				echo "${pid}" > "${pid_file}"
			else
				oldpid="$( cat "${pid_file}" )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${PN} PID from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_file}"
				fi
				unset oldpid
			fi
		fi
	fi

	local socket=$(get_config "${MY_CNF}" socket | tail -n1)

	ewaitfile ${STARTUP_TIMEOUT} "${socket}"
	return ${?}
}

reload() {
	local -i pid=0

	if ! service_started "${RC_SVCNAME}" ; then
		eerror "${RC_SVCNAME} isn't running"
		return 1
	fi

	checkconfig || return 1

	local mysqld_pidfile="$( get_config "${MY_CNF}" 'pid[_-]file' | tail -n 1 )"

	ebegin "Reloading $( mysql_svcname ) configuration and re-opening log files"
	if [ -s "${mysqld_pidfile}" ]; then
		: $(( pid = $( cat "${mysqld_pidfile}" ) ))
	fi
	if [ $(( pid )) -gt 1 ]; then
		kill -HUP ${pid}
	fi
	eend ${?}
}

stop_pre() {
	if [ ${RC_CMD} = "restart" ] ; then
		checkconfig || return 1
	fi
}

stop_post() {
	local id=''

	id="$( docker ps --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker stop "${id}" >/dev/null
	fi

	if [ "${RC_CMD:-}" = 'restart' ] || [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
		if [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi

	local mysqld_pidfile="$( get_config "${MY_CNF}" 'pid[_-]file' | tail -n 1 )"

	if [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		[ -e "${mysqld_pidfile}" ] && rm "${mysqld_pidfile}" || :
	fi
}

init_mysql_database() {
	if ! service_stopped; then
		eerror "Service $( mysql_svcname ) must be stopped in order to configure a new installation"
		return 1
	fi

	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	_checkpaths || return 1

	local DOCKER_SCRIPT="$( cat <<-EOF
		inherit() { : ; } ;
		use() { case "\${1:-}" in prefix) return 1 ;; *) return 0 ;; esac ; } ;
		die() { echo -e "\${*:-Unknown error}" ; exit 1 ; } ;
		TMPDIR='/var/log/mysql/install' ;
		mkdir -p "\${TMPDIR}" ;
		rm -f "\${TMPDIR}/mysqld-help" ;
		. /lib/gentoo/functions.sh ;
		. <( bzcat /var/db/pkg/dev-db/mariadb-1*/environment.bz2 ) ;
		. \$( ls -1 /var/db/pkg/dev-db/mariadb-1*/*.ebuild ) ;
		pkg_config ;
		rm -f "\${TMPDIR}/mysqld-help" ;
	EOF
	)"
	local nl="$( printf '\n' )"
	DOCKER_SCRIPT="$( echo "${DOCKER_SCRIPT}" | tr "${nl}" ' ' )"
	unset nl

	docker run "${dockeropts[@]}" \
			--user root:root \
			--cap-add CHOWN \
			--cap-add DAC_OVERRIDE \
			--cap-add KILL \
			--cap-add SETGID \
			--cap-add SETUID \
			--network none \
			--env MYSQL_ROOT_PASSWORD \
			--name "openrc-${PN}-${PV}-config" \
			--replace \
			--restart no \
			--rm \
			--entrypoint=/bin/bash \
		"${dockerimage}" -c "${DOCKER_SCRIPT}"
}

# vi: set filetype=gentoo-init-d:
