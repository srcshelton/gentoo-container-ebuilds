#!/sbin/openrc-run
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

getconfval() {
	val="${1:-}"

	[ -n "${val:-}" ] || return 1

	sed 's/#.*$//' "${CONFFILE}" |
	grep "^[[:space:]]*${val}[[:space:]]" |
	awk '{ print $2 }' | tail -n 1
}

PN="${RC_SVCNAME:=opendkim}" # PN='opendkim'
PV='@PVR@'
CATEGORY='mail-filter'

: ${CONFFILE:=/etc/opendkim/${RC_SVCNAME}.conf}
: ${OPENDKIM_SOCKET:=$(getconfval Socket)}
: ${OPENDKIM_PIDFILE:=$(getconfval PidFile)}
: ${OPENDKIM_SOCKET:=local:/var/run/${PN}/${RC_SVCNAME}.sock}
: ${OPENDKIM_PIDFILE:=/var/run/${PN}/${RC_SVCNAME}.pid}
: ${OPENDKIM_ARGS:=-P ${OPENDKIM_PIDFILE} -x ${CONFFILE} -p ${OPENDKIM_SOCKET}}

podman_memory_size='nano'

container_svc_pid="${OPENDKIM_PIDFILE}"
command_opts="${OPENDKIM_ARGS} -f -v"

container_dir_run="$( dirname "${container_svc_pid}" )"
container_dir_log_owner='opendkim'
container_dir_lib_mode='0775'
container_dir_lib_group='opendkim'
container_dir_lib="/var/lib/${PN}"
container_use_git="${OPENDKIM_USE_GIT:-}"
container_use_pid=0

. /etc/init.d/_containers_common || return ${?}

dockeropts+=(
	#--cap-drop ALL
	--cap-add SETGID
	--cap-add SETUID
)
dockernetwork+=(
	--network host
)

dockermounts=( ${dockermount_defaults[@]} )

_containers_set_args

#command_user='opendkim:opendkim'

description="A milter providing DKIM signing and verification"
extra_commands="checkconfig"
extra_started_commands="stats reportstats"
extra_stopped_commands="configure"
description_checkconfig="Validate configuration"
description_stats="Output statistics"
description_reportstats="Push statistics to opendkim.org"
description_configure="Generate initial keys and selectors"

required_files="${CONFFILE}"

depend() {
	[[ "$( type -t _containers_depend )" == 'function' ]] &&
		_containers_depend
	use dns logger
	before mta
}

_checkpaths() {
	_containers_check_paths || return ${?}

	# This relies on the "local:" prefix being there, but the conf.d
	# file explicitly states that it's not optional (contrary to what
	# the opendkim(8) man page says).
	if [ "${OPENDKIM_SOCKET#local:}" != "${OPENDKIM_SOCKET}" ]; then
		# The socket begins with "local:"
		OPENDKIM_SOCKET_PATH="${OPENDKIM_SOCKET#local:}"
		OPENDKIM_SOCKET_DIR="${OPENDKIM_SOCKET_PATH%/*}"

		# This is dangerous, but there's a big warning about it
		# in the conf.d file.
		checkpath --directory --owner opendkim --quiet "${OPENDKIM_SOCKET_DIR}" || return 1
	fi
}

checkconfig() {
	local -i rc=0

	ebegin "Checking configuration in '${CONFFILE}'"

	# The opendkim.conf man page says,
	#
	#   For parameters that are Boolean in nature, only the first byte
	#   of the value is processed... For negative values, the following
	#   are accepted: "F", "f", "N", "n", "0".'
	#
	#if grep --quiet '^[[:space:]]*Background[[:space:]]\+[FfNn0]' \
	#		"${CONFFILE}"; then
	#	eend 1 "${RC_SVCNAME} cannot run in the foreground!"
	#fi
	if grep --quiet '^[[:space:]]*Background[[:space:]]\+[TtYy1]' \
			"${CONFFILE}"; then
		eend 1 "${RC_SVCNAME} cannot be configured to run in the background"
		return 1
	fi

	_checkpaths || return 1

	if service_started; then
		docker exec "${container_name}" \
			opendkim -n ${OPENDKIM_ARGS}
	else
		docker run "${dockeropts[@]}" "${dockermounts[@]}" \
				--cap-drop ALL \
				--name "${container_name}-checkconfig" \
				--network none \
				--replace \
				--restart no \
				--rm \
			"localhost/${dockerimage}" -n ${OPENDKIM_ARGS} || rc=${?}
	fi
	eend ${rc} "${RC_SVCNAME} configuration check failed"

	return ${rc}
}

start_pre() {
	_checkpaths || return 1

	# If this isn't a restart, make sure that the user's config isn't
	# busted before we try to start the daemon (this will produce
	# better error messages than if we just try to start it blindly).
	#
	# If, on the other hand, this *is* a restart, then the stop_pre
	# action will have ensured that the config is usable and we don't
	# need to do that again.
	if [ "${RC_CMD}" != "restart" ]; then
		checkconfig || return ${?}
	fi

	_containers_start_pre || return ${?}

	if [ "${OPENDKIM_SOCKET#local:}" != "${OPENDKIM_SOCKET}" ] && [ -S "${OPENDKIM_SOCKET}" ] && ! fuser -s "${OPENDKIM_SOCKET}"; then
		# Remove stalled Unix socket if no other process is
		# using it
		if ! rm "${UNIX_SOCKET}"; then
			eend 2 "failed to remove stale unix socket ${OPENDKIM_SOCKET}"
		fi
	fi
}

stop_pre() {
	# If this is a restart, check to make sure the user's config
	# isn't busted before we stop the running daemon.
	if [ "${RC_CMD}" = "restart" ]; then
		checkconfig || return ${?}
	fi
}

stats() {
	_checkpaths || return 1

	docker exec "${container_name}" \
		opendkim-stats /var/lib/${PN}/stats.dat ${@+"${@}"}
}

reportstats() {
	_checkpaths || return 1

	docker exec "${container_name}" \
		opendkim-reportstats ${@+"${@}"}
}

configure() {
	local selector keysize pubkey

	_checkpaths || return 1

	read -rp "Enter the selector name (default '${HOSTNAME:-}'): " selector
	[ -n "${selector}" ] || selector="${HOSTNAME:-}"
	if [ -z "${selector:-}" ]; then
		eerror "Oddly enough, you don't have a HOSTNAME."
		return 1
	fi
	if [ -f "/var/lib/opendkim/${selector}.private" ]; then
		ewarn "The private key for selector '${selector}' already exists."
	else
		keysize=1024
		# Generate the private and public keys. Note that opendkim-genkey
		# sets umask=077 on its own to keep these safe. However, we want
		# them to be readable (only!) to the opendkim user, and we manage
		# that by changing their groups and making everything group-readable.
		docker run "${dockeropts[@]}" "${dockermounts[@]}" \
				--network none \
				--name "${container_name}-genkey" \
				--replace \
				--restart no \
				--rm \
				--entrypoint /usr/sbin/opendkim-genkey \
			"localhost/${dockerimage}" \
				-b ${keysize} -D /var/lib/opendkim/ \
				-s "${selector}" -d '(your domain)' && \
			chgrp --no-dereference opendkim \
				  "/var/lib/opendkim/${selector}".{private,txt} || \
				{ eerror "Failed to create private and public keys."; return 1; }
		chmod g+r "/var/lib/opendkim/${selector}".{private,txt}
	fi

	# opendkim selector configuration
	echo
	einfo "Make sure you have the following settings in your /etc/opendkim/opendkim.conf:"
	einfo "  Keyfile /var/lib/opendkim/${selector}.private"
	einfo "  Selector ${selector}"

	# MTA configuration
	echo
	einfo "If you are using Postfix, add following lines to your main.cf:"
	einfo "  smtpd_milters	   = unix:/var/run/opendkim/opendkim.sock"
	einfo "  non_smtpd_milters = unix:/var/run/opendkim/opendkim.sock"
	einfo "  and read http://www.postfix.org/MILTER_README.html"

	# DNS configuration
	einfo "After you configured your MTA, publish your key by adding this TXT record to your domain:"
	cat "/var/lib/opendkim/${selector}.txt"
	einfo "t=y signifies you only test the DKIM on your domain. See following page for the complete list of tags:"
	einfo "  http://www.dkim.org/specs/rfc4871-dkimbase.html#key-text"
}

# vi: set filetype=gentoo-init-d colorcolumn=80:
