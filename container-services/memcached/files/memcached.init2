#!/sbin/openrc-run

PN="${RC_SVCNAME:=memcached}" # PN='memcached'
PV='@PVR@'
CATEGORY='net-misc'

: ${CONF:=${RC_SVCNAME#*.}}
: ${CONFBASE:=/etc/conf.d/memcached}
: ${MEMUSAGE:=64}
: ${MAXCONN:=1024}
: ${MEMCACHED_RUNAS:=memcached}
: ${PIDFILE:=/var/run/${PN}/${RC_SVCNAME}}

[ -z "${PIDBASE:-}" ] && PIDBASE="/var/run/memcached/memcached"
[ "${CONF}" = "memcached" ] && CONF=''

if [ -n "${CONF:-}" ]; then
	PIDFILE="${PIDBASE}.${CONF}.pid"
	CONFSRC="${CONFBASE}.${CONF}"
	if [ -f "${CONFSRC}" ]; then
		. "${CONFSRC}"
	else
		eerror "The configuration file ${CONFSRC} was not found!"
	fi
else
	PIDFILE="${PIDBASE}.pid"
	CONFSRC="${CONFBASE}"
fi

command="docker"
if type -pf podman >/dev/null; then
	command="podman"
	docker() { [ "${1:-}" = 'rm' ] && trap '' INT ; podman ${@+"${@}"} ; trap  - INT ; }
	export -f docker
fi

dockeropts=(
	#--log-level debug

	--cap-drop ALL
	--cap-add SETGID
	--cap-add SETUID

	--volume /dev/hugetlb:/dev/hugetlb

	--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log
	--mount type=bind,source=/var/run/${PN},destination=/var/run/${PN}

	--network host
	# "Port mappings have been discarded as one of the Host, Container, Pod, and None network modes are in use"
	#--publish 11211:11211/tcp
	#--publish 11211:11211/udp

	--interactive
	--name "openrc-${PN}-${PV}"
	--restart on-failure
	#--rm
	--tty
)
dockerimage="service.${CATEGORY}.${PN}:${PV}"

name="containerised memcached${CONF:+ (${CONF})}"
command_args="--log-level=info run ${dockeropts[@]} ${dockerimage} ${SOCKET:--p ${PORT} -U ${UDPPORT}${LISTENON:+ -l ${LISTENON}}}${SOCKET:+-s ${SOCKET}${SOCKET_MARK:+ -a ${SCOCKET_MASK}}} -m ${MEMUSAGE} -c ${MAXCONN} -u ${MEMCACHED_RUNAS} -P '${PIDFILE}' ${MISC_OPTS}"
command_background="true"
#command_user="root:root"
start_stop_daemon_args="--wait 1000 --stdout /var/log/${PN}/${command}-${RC_SVCNAME}.log --stderr /var/log/${PN}/${command}-${RC_SVCNAME}.log"
pidfile="/var/run/containers/${RC_SVCNAME}.pid"

description="High-performance, distributed memory object caching system"

depend() {
	# per bug #269022, accurate time is important for memcached!
	# We include the full list of ways it might be set on boot.
	after ntp-client ntpd rdate openrdate adjtimex hwclock
	need containers
}

checkconfig() {
	if [ -z "${LISTENON:-}" ] && [ -z "${SOCKET:-}" ]; then
		ewarn "You should edit '${CONFSRC:-}' and specify an address or socket to listen on."
		ewarn "Listening on any address (check your firewall!)"
	fi
}

start_pre() {
	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	checkpath --directory --mode 0755 --owner root:root --quiet "$( dirname "${pidfile}" )" || return 1

	checkpath --directory --mode 0755 --owner root:root --quiet "/var/log/${PN}" || return 1
	checkpath --directory --mode 0755 --owner ${MEMCACHED_RUNAS}:memcached --quiet "$( dirname "${PIDFILE}" )" || return 1

	checkconfig

	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	# This should have been cleared by checkpath's 'directory-truncate'...
	[ -e "${PIDFILE:-}" ] && rm "${PIDFILE}" || :
}

start_post() {
	local -i wait=5 count=0 oldpid=0 pid=0 expect_pid=0 have_pid=0
	local sleep='1' pid_file="${PIDFILE:-}"

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	if [ $(( expect_pid )) -eq 1 ]; then
		while [ ! -s "${pid_file}" ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( count = count + 1 ))
		done
		if ! [ -s "${pid_file}" ]; then
			eerror "Timed-out waiting for '${PN}' PID in file '${pid_file}'"
		else
			have_pid=1
		fi
	else
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
				: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			else
				: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			fi
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for '${PN}' from container 'openrc-${PN}-${PV}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving ${PN} PID '${pid}' ..."
				echo "${pid}" > "${pid_file}"
			else
				oldpid="$( cat "${pid_file}" )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${PN} PID from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_file}"
				fi
				unset oldpid
			fi
		fi
	fi
}

stop_post() {
	local id=''

	id="$( docker ps --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker stop "${id}" >/dev/null
	fi

	if [ "${RC_CMD:-}" = 'restart' ] || [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
		if [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi

	if [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		[ -e "${PIDFILE:-}" ] && rm "${PIDFILE}" || :
	fi
}
