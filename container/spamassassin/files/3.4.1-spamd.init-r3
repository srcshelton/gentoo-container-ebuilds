#!/sbin/openrc-run
# Copyright 1999-2017 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

# Tiny
#: ${PODMAN_MEMORY_RESERVATION:=256m}
#: ${PODMAN_MEMORY_LIMIT:=512m}
#: ${PODMAN_SWAP_LIMIT:=1g}
# Small
: ${PODMAN_MEMORY_RESERVATION:=512m}
: ${PODMAN_MEMORY_LIMIT:=1g}
: ${PODMAN_SWAP_LIMIT:=2g}
# Medium
#: ${PODMAN_MEMORY_RESERVATION:=1g}
#: ${PODMAN_MEMORY_LIMIT:=2g}
#: ${PODMAN_SWAP_LIMIT:=4g}
# Large
#: ${PODMAN_MEMORY_RESERVATION:=2g}
#: ${PODMAN_MEMORY_LIMIT:=4g}
#: ${PODMAN_SWAP_LIMIT:=8g}
# Extra-Large
#: ${PODMAN_MEMORY_RESERVATION:=4g}
#: ${PODMAN_MEMORY_LIMIT:=8g}
#: ${PODMAN_SWAP_LIMIT:=16g}

: ${SPAMD_NICELEVEL:=0}
: ${SPAMD_TIMEOUT:=20}
if [ -n "${SPAMD_PIDFILE:-}" ]; then
	: ${SPAMD_PIDDIR:=$(dirname "${SPAMD_PIDFILE}")}
else
	: ${SPAMD_PIDDIR:=/var/run/${RC_SVCNAME}}
fi
: ${SPAMD_PIDFILE:=${SPAMD_PIDDIR}/spamd.pid}

command="docker"
if type -pf podman >/dev/null; then
	command="podman"
	docker() { [ "${1:-}" = 'rm' ] && trap '' INT ; podman ${@+"${@}"} ; trap  - INT ; }
	export -f docker
fi

PN='spamassassin' # PN="${RC_SVCNAME:=spamd}"
PV='@PVR@'
CATEGORY='mail-filter'
dockeropts=(
	#--log-level debug

	--cap-drop ALL
	--cap-add NET_BIND_SERVICE
	--cap-add CHOWN
	--cap-add DAC_OVERRIDE
	--cap-add SETGID
	--cap-add SETUID

	${PODMAN_MEMORY_RESERVATION:+--memory-reservation ${PODMAN_MEMORY_RESERVATION}}
	${PODMAN_MEMORY_LIMIT:+--memory ${PODMAN_MEMORY_LIMIT}}
	${PODMAN_SWAP_LIMIT:+--memory-swap ${PODMAN_SWAP_LIMIT}}

	--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log
	--mount type=bind,source=/var/run/mysqld/,destination=/var/run/mysqld/,ro=true

	--mount type=bind,source=/etc/GeoIP.conf,destination=/etc/GeoIP.conf,ro=true
	--mount type=bind,source=/var/lib/geoip/,destination=/usr/share/GeoIP/,ro=true

	--mount type=bind,source=/etc/mail/${PN}/,destination=/etc/mail/${PN}/
	--mount type=bind,source=/etc/mail/${PN}/,destination=/etc/${PN}/

	#--mount type=bind,source=/usr/share/${PN}/,destination=/usr/share/${PN}/,ro=true
	--mount type=bind,source=/var/lib/${PN}/,destination=/var/lib/${PN}/
	--mount type=bind,source=/var/log/${RC_SVCNAME}/,destination=/var/log/${RC_SVCNAME}/
	--mount type=bind,source=/var/run/${RC_SVCNAME}/,destination=/var/run/${RC_SVCNAME}/

	--mount type=bind,source=/etc/passwd,destination=/etc/passwd,ro=true
	--mount type=bind,source=/etc/group,destination=/etc/group,ro=true
	--mount type=bind,source=/etc/shadow,destination=/etc/shadow,ro=true
	--mount type=bind,source=/etc/gshadow,destination=/etc/gshadow,ro=true
	--mount type=bind,source=/root/,destination=/root/
	--mount type=bind,source=/home/,destination=/home/
	--mount type=bind,source=/storage/mail/,destination=/storage/mail/

	--network host
	# "Port mappings have been discarded as one of the Host, Container, Pod, and None network modes are in use"
	#--publish 783:783/tcp

	--init
	--interactive
	--name "openrc-${PN}-${PV}"
	--restart on-failure
	#--rm
	--tty
)
dockerimage="service.${CATEGORY}.${PN}:${PV}"

name="containerised spamd"
command_args="--log-level=info run ${dockeropts[@]} ${dockerimage} \"--pidfile=${SPAMD_PIDFILE}\" ${SPAMD_OPTS}"
command_background="true"
#command_args_background="--daemonize"
#command_user="mail:mail"
start_stop_daemon_args="--wait 1000 --stdout /var/log/${RC_SVCNAME}/${command}-${RC_SVCNAME}.log --stderr /var/log/${RC_SVCNAME}/${command}-${RC_SVCNAME}.log --nicelevel ${SPAMD_NICELEVEL}"
pidfile="/var/run/containers/${RC_SVCNAME}.pid"
# Retry after SPAMD_TIMEOUT seconds because spamd can take a
# while to kill off all of its children. This was bug 322025.
retry="${SPAMD_TIMEOUT}"
command_progress='true'

if [ "${SPAMD_RUN_AS_ROOT:-}" != 'true' ]; then
	# Passing --username=root to spamd kills it, so if SPAMD_RUN_AS_ROOT
	# is true, then we want to pass no user/group command args at all.
	# Any value other than "true" gets the default user/group of "spamd".
	command_args="${command_args} --username=spamd --groupname=spamd"
fi

#required_dirs="${SPAMD_PIDDIR}"

extra_stopped_commands="forceupdate inspect update"
extra_started_commands="reload clean"
description_forceupdate="Download and force compilation of spamassassin and geoip updates"
description_inspect="Launch container interactively"
description_update="Download and compile spamassassin and geoip updates"
description_reload="Re-read configuration files. Running processes terminate at their earliest convenience."
description_clean="run DCC maintenance"
description="An extensible mail filter which can identify and tag spam"

depend() {
	need containers
	use logger mysql postgresql
	before mta
}

update() {
	#local PN='' PV='' CATEGORY='' dockerimage=''
	local PN='' dockerimage='' force="${1:-}"
	local -a dockeropts=()

	PN='spamassassin-update'
	#PV='3.4.4-r4'
	#CATEGORY='mail-filter'
	dockeropts=(
		#--log-level debug

		--cap-drop ALL
		--cap-add SETGID
		--cap-add SETUID

		# Tiny
		#: ${PODMAN_MEMORY_RESERVATION:=256m}
		#: ${PODMAN_MEMORY_LIMIT:=512m}
		#: ${PODMAN_SWAP_LIMIT:=1g}
		--memory-reservation 256m
		--memory 512m
		--memory-swap 1g

		--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log
		--mount type=bind,source=/etc/GeoIP.conf,destination=/etc/GeoIP.conf,ro=true
		--mount type=bind,source=/var/lib/geoip/,destination=/usr/share/GeoIP
		--mount type=bind,source=/etc/mail/spamassassin/,destination=/etc/mail/spamassassin
		--mount type=bind,source=/etc/mail/spamassassin/,destination=/etc/spamassassin
		#--mount type=bind,source=/usr/share/spamassassin/,destination=/usr/share/spamassassin # Unused
		--mount type=bind,source=/var/lib/spamassassin/,destination=/var/lib/spamassassin
		${force:+--mount type=bind,source=/dev/null,destination=/.force-update,ro=true}
		#--mount type=bind,source=/opt/containers/docker-gentoo-build/gentoo-base/entrypoint.d/sa-update,destination=/usr/libexec/entrypoint.d/sa-update,ro=true

		--network host

		--interactive
		--name "openrc-${PN}-${PV}"
		--rm
		--tty
	)
	dockerimage="service.${CATEGORY}.${PN}:${PV}"

	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	local id=''
	local -i rc=0
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}-update" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi
	if [ -z "${force:-}" ]; then
		einfo "Updating spamassassin data ..."
	else
		einfo "Force-updating spamassassin data ..."
	fi
	docker run "${dockeropts[@]}" \
			--name "openrc-${PN}-${PV}-update" \
			--replace \
			--restart no \
			--rm \
		"${dockerimage}" || rc=${?}

	return ${rc}
}

forceupdate() {
	update force
}

inspect() {
	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	docker --log-level=info run --interactive "${dockeropts[@]}" \
			--name "openrc-${PN}-${PV}-inspect" \
			--replace \
			--restart no \
			--rm \
			--entrypoint=/bin/sh \
		"${dockerimage}"
}

start_pre() {
	local git='' dir='/etc/mail/spamassassin'

	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	checkpath --directory --mode 0755 --owner root:root --quiet "$( dirname "${pidfile}" )" || return 1

	if service_started || service_starting; then
		checkpath --directory --mode 0775 --owner spamd:spamd --quiet "/var/run/${RC_SVCNAME}" || return 1
	else
		checkpath --directory-truncate --mode 0775 --owner spamd:spamd --quiet "/var/run/${RC_SVCNAME}" || return 1
	fi
	checkpath --directory --mode 0775 --owner spamd:root --quiet "/var/log/${RC_SVCNAME}" || return 1

	if [ -n "${SPAMD_USE_GIT:-}" ] && [ "${SPAMD_USE_GIT}" != "0" ]; then
		type -pf git >/dev/null 2>&1 && git="git"
	fi
	if [ -d "${dir}/.git" ] && [ -n "${git:-}" ]; then
		if ! [ -s "${dir}/.gitignore" ]; then
			cat >> "${dir}/.gitignore" <<-EOF
				**/._cfg[0-9][0-9][0-9][0-9]_*
				**/.keep*
				**/.*.swp
			EOF
		fi
		pushd "${dir}/">/dev/null 2>&1 &&
			git status 2>/dev/null | grep -Eq '^(Untracked files:$|\s+(deleted|modified|new file):\s+)' &&
			einfo "Committing configuration changes to git" &&
			git add --all . >/dev/null 2>&1 &&
			git status | tail -n +4 &&
			git commit -m "Record changes on ${RC_SVCNAME} start" >/dev/null 2>&1
		popd >/dev/null 2>&1
	fi

	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	# This should have been cleared by checkpath's 'directory-truncate'...
	[ -e "${SPAMD_PIDFILE}" ] && rm "${SPAMD_PIDFILE}" || :
}

start_post() {
	# Additional delay for sa-update/geoipupdate...
	local -i wait=90 count=0 oldpid=0 pid=0 expect_pid=1 have_pid=0
	local sleep='1' pid_file="${SPAMD_PIDFILE}"

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	if [ $(( expect_pid )) -eq 1 ]; then
		while [ ! -s "${pid_file}" ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( count = count + 1 ))
		done
		if ! [ -s "${pid_file}" ]; then
			eerror "Timed-out waiting for '${PN}' PID in file '${pid_file}'"
		else
			have_pid=1
		fi
	else
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
				: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			else
				: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			fi
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for '${PN}' from container 'openrc-${PN}-${PV}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving ${PN} PID '${pid}' ..."
				echo "${pid}" > "${pid_file}"
			else
				oldpid="$( cat "${pid_file}" )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${PN} PID from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_file}"
				fi
				unset oldpid
			fi
		fi
	fi
}

reload() {
	local -i wait=90 count=0 oldpid=0 pid=0 have_pid=0
	local sleep='1' pid_file="${SPAMD_PIDFILE}"

	if ! service_started "${SVCNAME}" ; then
		eerror "${SVCNAME} isn't running"
		return 1
	fi

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	# N.B. oldpid should be the host PID, not the PID within the container...
	if [ -s "${pid_file}" ]; then
		: $(( oldpid = $( cat "${pid_file}" 2>/dev/null ) ))
	fi
	if [ -z "${oldpid:-}" ] || [ $(( oldpid )) -eq 1 ]; then
		: $(( oldpid = 0 ))
		echo '0' > "${pid_file}"
	fi

	ebegin "Reloading ${RC_SVCNAME} configuration"
	# Warning: reload causes the PID of the spamd process to change, but
	# spamd does remove then re-write its PID file after a short delay.
	: $(( pid = oldpid ))
	if [ $(( pid )) -gt 1 ]; then
		kill -HUP ${pid}
	else
		if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
			: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
		else
			: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
		fi
		if [ $(( pid )) -gt 1 ]; then
			kill -HUP ${pid}
		else
			eerror "Cannot determine PID for service '${RC_SVCNAME}'"
			return 1
		fi
	fi
	eend ${?}
	pid=0

	while [ $(( oldpid )) -eq "$( cat "${pid_file}" 2>/dev/null || echo '0' )" ] && [ $(( count )) -lt $(( wait )) ]; do
		sleep ${sleep}
		: $(( count = count + 1 ))
	done

	if [ $(( oldpid )) -eq "$( cat "${pid_file}" 2>/dev/null || echo '0' )" ]; then
		eerror "Timed-out waiting for reloaded '${RC_SVCNAME}' PID in file '${pid_file}'"
	else
		veinfo "Service '${RC_SVCNAME}' changed from host PID ${oldpid} to container PID $( cat "${pid_file}" 2>/dev/null || echo '0' )"
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
				: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" ) ))
			else
				: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" ) ))
			fi
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for reloaded service '${RC_SVCNAME}' from container 'openrc-${PN}-${PV}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving updated ${RC_SVCNAME} PID '${pid}' to '${pid_file}' ..."
				echo "${pid}" > "${pid_file}"
			else
				oldpid="$( cat "${pid_file}" 2>/dev/null || echo '0' )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${RC_SVCNAME} PID from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_file}"
				fi
				unset oldpid
			fi
		fi
	fi
}

clean() {
	if ! service_started "${SVCNAME}" ; then
		eerror "${SVCNAME} isn't running"
		return 1
	fi

	#docker run "${dockeropts[@]}" \
	#		--name "openrc-${PN}-${PV}-dcc-clean" \
	#		--replace \
	#		--restart no \
	#		--rm \
	#		--entrypoint=/bin/sh \
	#	"${dockerimage}" -c /etc/cron.daily/dccd
	docker exec "openrc-${PN}-${PV}" \
		sh -c /etc/cron.daily/dccd
}

stop_post() {
	local id=''

	id="$( docker ps --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker stop "${id}" >/dev/null
	fi

	if [ "${RC_CMD:-}" = 'restart' ] || [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
		if [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi

	if [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		[ -e "${SPAMD_PIDFILE}" ] && rm "${SPAMD_PIDFILE}" || :
	fi
}
