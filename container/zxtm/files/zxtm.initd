#!/sbin/openrc-run
# Copyright 1999-2020 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

command="docker"
if type -pf podman >/dev/null; then
	command="podman"
	docker() { [ "${1:-}" = 'rm' ] && trap '' INT ; podman ${@+"${@}"} ; trap  - INT ; }
	export -f docker
fi

PN='zxtm' # PN="${RC_SVCNAME:=zxtm}"
PV='@PVR@'
CATEGORY='net-misc'
dockeropts=(
	#--log-level debug

	#--privileged
	#--cap-drop ALL
	--cap-add NET_ADMIN
	--cap-add NET_BIND_SERVICE

	--env ZEUS_COMMUNITY_EDITION='yes'
	--env ZEUS_EULA='accept'

	#--hostname "$( hostname -s )"
	--init

	--interactive
	--name "openrc-${PN}-${PV}"
	--restart on-failure
	#--rm
	--tty
)
dockermounts=(
	--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log

	--mount type=bind,source=/var/run/zeus/zxtm/internal/,destination=/opt/zeus/zxtm/internal/

	--mount type=bind,source=/etc/zeus/uuid,destination=/opt/zeus/zxtm/etc/uuid
	--mount type=bind,source=/etc/zeus/zxtm/,destination=/opt/zeus/zxtm/conf_A/

	--mount type=bind,source=/etc/ssl/zeus/admin.private,destination=/opt/zeus/admin/etc/admin.private
	--mount type=bind,source=/etc/ssl/zeus/admin.public,destination=/opt/zeus/admin/etc/admin.public
	--mount type=bind,source=/etc/ssl/zeus/control.private,destination=/opt/zeus/zxtm/etc/control/control.private
	--mount type=bind,source=/etc/ssl/zeus/control.public,destination=/opt/zeus/zxtm/etc/control/control.public
	--mount type=bind,source=/etc/ssl/zeus/client/,destination=/opt/zeus/zxtm/conf_A/ssl/client_keys/
	--mount type=bind,source=/etc/ssl/zeus/server/,destination=/opt/zeus/zxtm/conf_A/ssl/server_keys/

	#--mount type=bind,source=/etc/zeus/admin/global.cfg,destination=/opt/zeus/admin/global.cfg
	#--mount type=bind,source=/etc/zeus/admin/website,destination=/opt/zeus/admin/website
	--mount type=bind,source=/etc/zeus/admin/,destination=/opt/zeus/admin/var/

	--mount type=bind,source=/var/cache/zeus/admin/,destination=/opt/zeus/admin/gzip_cache/

	--mount type=bind,source=/etc/zeus/stingray/,destination=/opt/zeus/stingrayafm/etc/
	--mount type=bind,source=/var/lib/zeus/stingray/,destination=/opt/zeus/stingrayafm/current/var/lib/

	--mount type=bind,source=/var/log/zeus/admin/,destination=/opt/zeus/admin/log/
	--mount type=bind,source=/var/log/zeus/stingray/generic/,destination=/opt/zeus/stingrayafm/generic/log/
	--mount type=bind,source=/var/log/zeus/stingray/log/,destination=/opt/zeus/stingrayafm/current/var/log/
	--mount type=bind,source=/var/log/zeus/stingray/master/,destination=/opt/zeus/stingrayafm/generic/log-master/
	--mount type=bind,source=/var/log/zeus/updater/,destination=/opt/zeus/updater/generic/auditlog/
	--mount type=bind,source=/var/log/zeus/zxtm/,destination=/opt/zeus/log/
)
dockerports=(
	--network host

	# "Port mappings have been discarded as one of the Host, Container, Pod, and None network modes are in use"
	## SNMP responder on :161 when run as root, :1161 otherwise
	#--publish 161:161/tcp
	#--publish 1161:1161/tcp

	## WAF Updater Slave port
	#--publish 8092:8092/tcp

	## WAF Enforcer/Decider port
	#--publish 8100:8100/tcp

	## WAF XML Master port
	#--publish 11103:11103/tcp
	## WAF XML Slave port
	#--publish 11104:11104/tcp

	## REST API
	#--publish 9070:9070/tcp

	## ZXTM
	#--publish 9080:9080/tcp

	## Admin Server
	#--publish 9090:9090/tcp

)
dockerimage="service.${CATEGORY}.${PN}:${PV}"

#declare -i port=0
#for port in $(
#	grep -Riw '^port' /etc/zeus/admin/website /etc/zeus/zxtm/vservers |
#	cut -d':' -f 2- |
#	awk '{ print $2 }' |
#	sort |
#	uniq
#); do
#	(( 0 == port || 65535 == port )) && continue
#	(( 9070 == port || 9080 == port || 9090 == port )) && continue
#	dockerports+=( --publish ${port}:${port}/tcp )
#done
#unset port

name="containerised ZXTM"
command_args="--log-level=info run ${dockeropts[@]} ${dockermounts[@]} ${dockerports[@]} ${dockerimage}"
command_background='true'
#command_user='nobody:nogroup'
start_stop_daemon_args="--wait 1000 --stdout /var/log/zeus/${command}-${RC_SVCNAME}.log --stderr /var/log/zeus/${command}-${RC_SVCNAME}.log"
pidfile="/var/run/containers/${RC_SVCNAME}.pid"
retry='15'

extra_stopped_commands="inspect"
description_inspect="Launch container interactively"
description="Pulse Secure Virtual Traffic Manager (former Zeus ZXTM)"

depend() {
	need containers
}

_checkpaths() {
	checkpath --directory --mode 0755 --owner root:root --quiet "$( dirname "${pidfile}" )" || return 1

	checkpath --directory --mode 0755 --owner root:root --quiet /var/run/zeus || return 1
	checkpath --directory --mode 0755 --owner root:root --quiet /var/run/zeus/zxtm || return 1
	checkpath --directory --mode 0755 --owner root:sys --quiet /var/run/zeus/zxtm/internal || return 1

	checkpath --directory --mode 0755 --owner root:root --quiet "/var/log/zeus" || return 1
}

inspect() {
	_checkpaths || return 1

	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	docker --log-level=debug run --interactive "${dockeropts[@]}" "${dockermounts[@]}" "${dockerports[@]}" \
			--name "openrc-${PN}-${PV}-inspect" \
			--replace \
			--restart no \
			--rm \
			--entrypoint=/bin/sh \
		"${dockerimage}"
}

start_pre() {
	local git='' dir='/etc/zeus'

	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	_checkpaths || return 1

	if [ -n "${ZXTM_USE_GIT:-}" ] && [ "${ZXTM_USE_GIT}" != "0" ]; then
		type -pf git >/dev/null 2>&1 && git="git"
	fi
	if [ -d "${dir}/.git" ] && [ -n "${git:-}" ]; then
		if ! [ -s "${dir}/.gitignore" ]; then
			cat >> "${dir}/.gitignore" <<-EOF
				**/._cfg[0-9][0-9][0-9][0-9]_*
				**/.keep*
				**/.*.swp
			EOF
		fi
		pushd "${dir}/">/dev/null 2>&1 &&
			git status 2>/dev/null | grep -Eq '^(Untracked files:$|\s+(deleted|modified|new file):\s+)' &&
			einfo "Committing configuration changes to git" &&
			git add --all . >/dev/null 2>&1 &&
			git status | tail -n +4 &&
			git commit -m "Record changes on ${RC_SVCNAME} start" >/dev/null 2>&1
		popd >/dev/null 2>&1
	fi

	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi
}

start_post() {
	local -i wait=20 count=0 oldpid=0 pid=0 expect_pid=1 have_pid=0
	local sleep='1' pid_file="/var/run/zeus/zxtm/internal/pid" pid_dir="/var/run/zeus/zxtm"

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	if [ $(( expect_pid )) -eq 1 ]; then
		while [ ! -s "${pid_file}" ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( count = count + 1 ))
		done
		if ! [ -s "${pid_file}" ]; then
			eerror "Timed-out waiting for '${PN}' PID in file '${pid_file}'"
		else
			have_pid=1
		fi
	else
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
				: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			else
				: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			fi
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for '${PN}' from container 'openrc-${PN}-${PV}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving ${PN} PID '${pid}' ..."
				echo "${pid}" > "${pid_dir}/${RC_SVCNAME}.pid"
			else
				oldpid="$( cat "${pid_file}" | head -n 1 | awk '{ print $1 }' )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${PN} PID from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_dir}/${RC_SVCNAME}.pid"
				fi
				unset oldpid
			fi
		fi
	fi
}

stop_post() {
	local id=''

	id="$( docker ps --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker stop "${id}" >/dev/null
	fi

	if [ "${RC_CMD:-}" = 'restart' ] || [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
		if [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi
}

# vi: set filetype=gentoo-init-d:
