#!/sbin/openrc-run
# Copyright 1999-2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

getconfval() {
	val="${1:-}"

	[ -n "${val:-}" ] || return 1

	sed 's/#.*$//' "${CONFFILE}" | grep "^[[:space:]]*${val}[[:space:]]" | awk '{ print $2 }' | tail -n 1
}

PN="${RC_SVCNAME:=opendkim}" # PN='opendkim'
PV='@PVR@'
CATEGORY='mail-filter'

: ${CONFFILE:=/etc/opendkim/${RC_SVCNAME}.conf}
: ${OPENDKIM_SOCKET:=$(getconfval Socket)}
: ${OPENDKIM_PIDFILE:=$(getconfval PidFile)}
: ${OPENDKIM_SOCKET:=local:/var/run/${PN}/${RC_SVCNAME}.sock}
: ${OPENDKIM_PIDFILE:=/var/run/${PN}/${RC_SVCNAME}.pid}
: ${OPENDKIM_ARGS:=-P ${OPENDKIM_PIDFILE} -x ${CONFFILE} -p ${OPENDKIM_SOCKET}}

command="docker"
if type -pf podman >/dev/null; then
	command="podman"
	docker() { [ "${1:-}" = 'rm' ] && trap '' INT ; podman ${@+"${@}"} ; trap  - INT ; }
	export -f docker
fi

dockeropts=(
	#--log-level debug
	--cap-drop ALL
	--cap-add SETGID
	--cap-add SETUID
	--interactive
	--mount type=bind,source=/var/run/syslog-ng/log,destination=/dev/log
	--mount type=bind,source=/etc/${PN}/,destination=/etc/${PN}/,ro=true
	--mount type=bind,source=/var/lib/${PN}/,destination=/var/lib/${PN}
	--mount type=bind,source=/var/log/${PN}/,destination=/var/log/${PN}
	--mount type=bind,source=/var/run/${PN}/,destination=/var/run/${PN}
	--name "openrc-${PN}-${PV}"

	--network host

	--restart on-failure
	#--rm
	--tty
)
dockerimage="service.${CATEGORY}.${PN}:${PV}"

name="containerised ${PN}"
command_args="--log-level=info run ${dockeropts[@]} ${dockerimage} ${OPENDKIM_ARGS} -f -v"
command_background='true'
#command_user='opendkim:opendkim'
start_stop_daemon_args="--wait 1000 --stdout /var/log/${PN}/${command}-${RC_SVCNAME}.log --stderr /var/log/${PN}/${command}-${RC_SVCNAME}.log"
pidfile="/var/run/containers/${RC_SVCNAME}.pid"

extra_commands="checkconfig"
extra_started_commands="stats reportstats"
extra_stopped_commands="configure"

description_checkconfig="Validate configuration"
description_stats="Output statistics"
description_reportstats="Push statistics to opendkim.org"
description_configure="Generate initial keys and selectors"
description="A milter providing DKIM signing and verification"

required_files="${CONFFILE}"

depend() {
	need containers
	use dns logger
	before mta
}

_checkpaths() {
	if ! docker image ls "${dockerimage}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${dockerimage}' not found"
		return 1
	fi

	checkpath --directory --mode 0755 --owner root:root --quiet "$( dirname "${pidfile}" )" || return 1

	if service_started || service_starting; then
		checkpath --directory --mode 0755 --owner root:root --quiet "$( dirname "${OPENDKIM_PIDFILE}" )" || return 1
	else
		checkpath --directory-truncate --mode 0755 --owner root:root --quiet "$( dirname "${OPENDKIM_PIDFILE}" )" || return 1
	fi

	checkpath --directory --mode 0755 --owner opendkim:opendkim --quiet "/var/log/${PN}" || return 1
	checkpath --directory --mode 0775 --owner root:opendkim --quiet "/var/lib/${PN}" || return 1

	# This relies on the "local:" prefix being there, but the conf.d
	# file explicitly states that it's not optional (contrary to what
	# the opendkim(8) man page says).
	if [ "${OPENDKIM_SOCKET#local:}" != "${OPENDKIM_SOCKET}" ]; then
		# The socket begins with "local:"
		OPENDKIM_SOCKET_PATH="${OPENDKIM_SOCKET#local:}"
		OPENDKIM_SOCKET_DIR="${OPENDKIM_SOCKET_PATH%/*}"

		# This is dangerous, but there's a big warning about it
		# in the conf.d file.
		checkpath --directory --owner opendkim --quiet "${OPENDKIM_SOCKET_DIR}" || return 1
	fi
}

checkconfig() {
	local -i rc=0

	ebegin "Checking configuration in '${CONFFILE}'"

	# The opendkim.conf man page says,
	#
	#   For parameters that are Boolean in nature, only the first byte
	#   of the value is processed... For negative values, the following
	#   are accepted: "F", "f", "N", "n", "0".'
	#
	#if grep --quiet '^[[:space:]]*Background[[:space:]]\+[FfNn0]' \
	#		"${CONFFILE}"; then
	#	eend 1 "${RC_SVCNAME} cannot run in the foreground!"
	#fi
	if grep --quiet '^[[:space:]]*Background[[:space:]]\+[TtYy1]' \
			"${CONFFILE}"; then
		eend 1 "${RC_SVCNAME} cannot be configured to run in the background"
		return 1
	fi

	_checkpaths || return 1

	if service_started; then
		docker exec "openrc-${PN}-${PV}" \
			opendkim -n ${OPENDKIM_ARGS}
	else
		docker run "${dockeropts[@]}" \
				--cap-drop ALL \
				--network none \
				--name "openrc-${PN}-${PV}-checkconfig" \
				--replace \
				--restart no \
				--rm \
			"${dockerimage}" -n ${OPENDKIM_ARGS} || rc=${?}
	fi
	eend ${rc} "${RC_SVCNAME} configuration check failed"
	return ${rc}
}

start_pre() {
	local git='' dir='/etc/opendkim'

	_checkpaths || return 1

	# If this isn't a restart, make sure that the user's config isn't
	# busted before we try to start the daemon (this will produce
	# better error messages than if we just try to start it blindly).
	#
	# If, on the other hand, this *is* a restart, then the stop_pre
	# action will have ensured that the config is usable and we don't
	# need to do that again.
	if [ "${RC_CMD}" != "restart" ]; then
		checkconfig || return $?
	fi

	if [ -n "${OPENDKIM_USE_GIT:-}" ] && [ "${OPENDKIM_USE_GIT}" != "0" ]; then
		type -pf git >/dev/null 2>&1 && git="git"
	fi
	if [ -d "${dir}/.git" ] && [ -n "${git:-}" ]; then
		if ! [ -s "${dir}/.gitignore" ]; then
			cat >> "${dir}/.gitignore" <<-EOF
				**/._cfg[0-9][0-9][0-9][0-9]_*
				**/.keep*
				**/.*.swp
			EOF
		fi
		pushd "${dir}/">/dev/null 2>&1 &&
			git status 2>/dev/null | grep -Eq '^(Untracked files:$|\s+(deleted|modified|new file):\s+)' &&
			einfo "Committing configuration changes to git" &&
			git add --all . >/dev/null 2>&1 &&
			git status | tail -n +4 &&
			git commit -m "Record changes on ${RC_SVCNAME} start" >/dev/null 2>&1
		popd >/dev/null 2>&1
	fi

	local id=''
	id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker rm --volumes "${id}" >/dev/null 2>&1
	fi

	if [ "${OPENDKIM_SOCKET#local:}" != "${OPENDKIM_SOCKET}" ] && [ -S "${OPENDKIM_SOCKET}" ] && ! fuser -s "${OPENDKIM_SOCKET}"; then
		# Remove stalled Unix socket if no other process is
		# using it
		if ! rm "${UNIX_SOCKET}"; then
			eend 2 "failed to remove stale unix socket ${OPENDKIM_SOCKET}"
		fi
	fi

	# This should have been cleared by checkpath's 'directory-truncate'...
	[ -e "${OPENDKIM_PIDFILE}" ] && rm "${OPENDKIM_PIDFILE}" || :
}

start_post() {
	local -i wait=5 count=0 oldpid=0 pid=0 expect_pid=0 have_pid=0
	local sleep='1' pid_file="${OPENDKIM_PIDFILE}"

	if sleep 0.1 >/dev/null 2>&1; then
		sleep='0.1'
		: $(( wait = wait * 10 ))
	fi

	if [ $(( expect_pid )) -eq 1 ]; then
		while [ ! -s "${pid_file}" ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			: $(( count = count + 1 ))
		done
		if ! [ -s "${pid_file}" ]; then
			eerror "Timed-out waiting for '${PN}' PID in file '${pid_file}'"
		else
			have_pid=1
		fi
	else
		have_pid=1
	fi
	if [ $(( have_pid )) -eq 1 ]; then
		# Even though generally considered vestigial, all linux kernels
		# still reserve PIDs up to 300 for kernel use only...
		count=0
		while [ $(( pid )) -lt 301 ] && [ $(( count )) -lt $(( wait )) ]; do
			sleep ${sleep}
			if [ "$( type -t docker 2>dev/null )" = 'function' ]; then
				: $(( pid = $( podman inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			else
				: $(( pid = $( docker inspect --format '{{.State.Pid}}' "openrc-${PN}-${PV}" 2>/dev/null || echo '0' ) ))
			fi
			: $(( count = count + 1 ))
		done

		if ! [ $(( pid )) -gt 300 ]; then
			eerror "Unable to determine valid PID for '${PN}' from container 'openrc-${PN}-${PV}' (got '${pid}')"
		else
			if ! [ -e "${pid_file}" ]; then
				vewarn "Saving ${PN} PID '${pid}' ..."
				echo "${pid}" > "${pid_file}"
			else
				oldpid="$( cat "${pid_file}" )"
				if ! [ "${oldpid}" = "${pid}" ]; then
					vewarn "Correcting ${PN} PID from '${oldpid}' to '${pid}' ..."
					echo "${pid}" > "${pid_file}"
				fi
				unset oldpid
			fi
		fi
	fi
}

stop_pre() {
	# If this is a restart, check to make sure the user's config
	# isn't busted before we stop the running daemon.
	if [ "${RC_CMD}" = "restart" ]; then
		checkconfig || return ${?}
	fi
}

stop_post() {
	local id=''

	id="$( docker ps --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
	if [ -n "${id:-}" ]; then
		docker stop "${id}" >/dev/null
	fi

	if [ "${RC_CMD:-}" = 'restart' ] || [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		id="$( docker ps -a --filter "name=openrc-${PN}-${PV}" --format '{{.ID}}' )"
		if [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi

	if [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		[ -e "${OPENDKIM_PIDFILE}" ] && rm "${OPENDKIM_PIDFILE}" || :
	fi
}

stats() {
	_checkpaths || return 1

	#docker run "${dockeropts[@]}" \
	#		--cap-drop ALL \
	#		--network none \
	#		--name "openrc-${PN}-${PV}-stats" \
	#		--replace \
	#		--restart no \
	#		--rm \
	#		--entrypoint=/usr/sbin/opendkim-stats \
	#	"${dockerimage}" /var/lib/${PN}/stats.dat ${@+"${@}"}
	docker exec "openrc-${PN}-${PV}" \
		opendkim-stats /var/lib/${PN}/stats.dat ${@+"${@}"}
}

reportstats() {
	_checkpaths || return 1

	#docker run "${dockeropts[@]}" \
	#		--cap-drop ALL \
	#		--name "openrc-${PN}-${PV}-reportstats" \
	#		--replace \
	#		--restart no \
	#		--rm \
	#		--entrypoint=/usr/sbin/opendkim-reportstats \
	#	"${dockerimage}" ${@+"${@}"}
	docker exec "openrc-${PN}-${PV}" \
		opendkim-reportstats ${@+"${@}"}
}

configure() {
	local selector keysize pubkey

	_checkpaths || return 1

	read -rp "Enter the selector name (default '${HOSTNAME:-}'): " selector
	[ -n "${selector}" ] || selector="${HOSTNAME:-}"
	if [ -z "${selector:-}" ]; then
		eerror "Oddly enough, you don't have a HOSTNAME."
		return 1
	fi
	if [ -f "/var/lib/opendkim/${selector}.private" ]; then
		ewarn "The private key for selector '${selector}' already exists."
	else
		keysize=1024
		# Generate the private and public keys. Note that opendkim-genkey
		# sets umask=077 on its own to keep these safe. However, we want
		# them to be readable (only!) to the opendkim user, and we manage
		# that by changing their groups and making everything group-readable.
		docker run "${dockeropts[@]}" \
				--network none \
				--name "openrc-${PN}-${PV}-genkey" \
				--replace \
				--restart no \
				--rm \
				--entrypoint /usr/sbin/opendkim-genkey \
			"${dockerimage}" \
				-b ${keysize} -D /var/lib/opendkim/ \
				-s "${selector}" -d '(your domain)' && \
			chgrp --no-dereference opendkim \
				  "/var/lib/opendkim/${selector}".{private,txt} || \
				{ eerror "Failed to create private and public keys."; return 1; }
		chmod g+r "/var/lib/opendkim/${selector}".{private,txt}
	fi

	# opendkim selector configuration
	echo
	einfo "Make sure you have the following settings in your /etc/opendkim/opendkim.conf:"
	einfo "  Keyfile /var/lib/opendkim/${selector}.private"
	einfo "  Selector ${selector}"

	# MTA configuration
	echo
	einfo "If you are using Postfix, add following lines to your main.cf:"
	einfo "  smtpd_milters	   = unix:/var/run/opendkim/opendkim.sock"
	einfo "  non_smtpd_milters = unix:/var/run/opendkim/opendkim.sock"
	einfo "  and read http://www.postfix.org/MILTER_README.html"

	# DNS configuration
	einfo "After you configured your MTA, publish your key by adding this TXT record to your domain:"
	cat "/var/lib/opendkim/${selector}.txt"
	einfo "t=y signifies you only test the DKIM on your domain. See following page for the complete list of tags:"
	einfo "  http://www.dkim.org/specs/rfc4871-dkimbase.html#key-text"
}
