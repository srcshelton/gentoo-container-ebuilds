#!/sbin/openrc-run
# Copyright 1999-2020 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

set_phpvars() {
	PHPSLOT="${RC_SVCNAME#php-fpm-}"
	if [ "${PHPSLOT}" = "php-fpm" ] ; then
		#PHPSLOT="$(eselect php show fpm)"
		PHPSLOT="php$( echo '@PVR@' | cut -d'.' -f 1-2 )"
		PHP_FPM_PID="/var/run/php/php-fpm.pid"
	else
		PHP_FPM_PID="/var/run/php/php-fpm-${PHPSLOT}.pid"
	fi

	PHP_FPM_CONF="/etc/php/fpm-${PHPSLOT}/php-fpm.conf"
}

set_phpvars || exit 1

podman_memory_size='medium'

WEB_SERVER='lighttpd'
CONTENT_IMAGE='service.www-servers.web-content:latest'
CPN='lighttpd'
CPV='@CPVR@'
content_name="openrc-${CPN}-${CPV}.web-content"

PN='php'
PV='@PVR@'
CATEGORY='dev-lang'
container_svc_pid="${PHP_FPM_PID}"
command_opts="$( echo "--fpm-config \"${PHP_FPM_CONF}\" --pid \"%PID%\"" \
	"--nodaemonize --force-stderr" )"

container_dir_run="$( dirname "${PHP_FPM_PID}" )"
container_dir_log_owner='nobody'
container_dir_log_group="${WEB_SERVER}"

. /etc/init.d/_containers_common || return ${?}

#svc_port="$(
#	sed 's/;.*$//' /etc/php/fpm-${PHPSLOT}/fpm.d/*.conf |
#	grep 'listen' |
#	cut -d'=' -f 2- |
#	cut -d':' -f 2- |
#	head -n 1 |
#	tr -cd '[:digit:]'
#)"
dockeropts+=(
	#--cap-drop ALL
	--cap-add CHOWN
	--cap-add DAC_OVERRIDE
	--cap-add FOWNER
	--cap-add SETGID
	--cap-add SETUID

	--network host
	#--publish 9000:9000/tcp
	#${svc_port:+--publish ${svc_port}:${svc_port}/tcp}
)

dockermounts=(
	${dockermount_syslog}
	${dockermount_ssl}
	${dockermount_log}
	${dockermount_run}
	--mount type=bind,source=/var/run/mysqld/,destination=/var/run/mysqld/,ro=true
	--mount type=bind,source=/etc/php/,destination=/etc/php/,ro=true
)
if [ -d /var/www/localhost/htdocs ]; then
	for webapp in /var/www/localhost/htdocs/*; do
		[ "${webapp%/\*}" = "${webapp}" ] || continue
		[ -d "${webapp}" ] || continue
		for dir in "${webapp}"/*; do
			[ "${dir%/\*}" = "${dir}" ] || continue
			[ -d "${dir}" ] || continue
			dockermounts+=(
				--mount type=bind,source=${dir},destination=${dir}
			)
		done
	done
fi
unset dir webapp

dockervolumes=(
	${dockervolumes_hugetlb}
	--volumes-from "${content_name}"
)

_containers_set_args

start_stop_daemon_args="${start_stop_daemon_args}${PHP_FPM_UMASK:+ --umask ${PHP_FPM_UMASK}}"
# php-fpm logs that it has received QUIT and TERM signals, but does nothing in
# response :(
retry='SIGQUIT/1/SIGTERM/1/SIGKILL/2'

name="containerised PHP FastCGI Process Manager for ${PHPSLOT}"
description="The PHP language runtime engine"
extra_commands="configtest"
extra_started_commands="reload sync"
extra_stopped_commands="inspect"
description_configtest="Validate service's configuration"
description_reload="Gracefully restart php-fpm"
description_sync="trigger Roundcube sync processes"
description_inspect="Launch container interactively"


depend() {
	need containers mysql
	use logger
}

_checkpaths() {
	local owner='' dir=''

	_containers_check_paths || return ${?}

	owner="${container_dir_log_owner}:${container_dir_log_group}"
	for dir in "${container_dir_log}"/{roundcube,wordpress}; do
		checkpath --directory \
				--mode 0770 \
				--owner "${owner}" \
				--quiet \
			"${dir}" || return ${?}
	done
}

configtest() {
	_checkpaths || return ${?}

	ebegin "Testing PHP FastCGI Process Manager configuration"
	# Hide the "test is successful" message (which goes to stderr) if
	# the test passed, but show the entire output if the test failed
	# because it may contain hints about the problem.
	OUTPUT=$(
	if service_started; then
		docker exec "${container_name}" \
			php-fpm --fpm-config "${PHP_FPM_CONF}" --test 2>&1
	else
		docker --log-level=error run "${command_docker_args[@]:-}" \
				--cap-drop ALL \
				--name "${container_name}-configtest" \
				--network none \
				--replace \
				--restart no \
				--rm \
			"${dockerimage}" --fpm-config "${PHP_FPM_CONF}" --test 2>&1
	fi
	)

	# Save this so `echo` doesn't clobber it.
	local exit_code=$?
	[ $exit_code -ne 0 ] && echo "${OUTPUT}" >&2
	eend $exit_code
}

inspect() {
	_checkpaths || return ${?}

	_containers_inspect
}

start_pre() {
	container_use_git="${PHP_USE_GIT:-}"

	local name=''

	if ! docker image ls "${CONTENT_IMAGE%:*}" | grep -Fq -- 'localhost'; then
		eerror "Container image '${CONTENT_IMAGE%:*}' not found"
		return 1
	fi

	_containers_start_pre || return ${?}

        # If configtest fails, we don't have to sit around for five
        # seconds waiting for a pid to show up.
	if [ "${RC_CMD}" != "restart" ]; then
		configtest || return $?
	fi

	id="$( docker ps -a \
		--filter "name=${content_name}" \
		--format '{{.ID}}' 2>/dev/null
	)"
	if [ -z "${id:-}" ]; then
		ebegin "Generating web-content volumes from '${RC_SVCNAME}'"
		docker run \
				--cap-drop ALL \
				--entrypoint=/bin/true \
				--name "${content_name}" \
				--network none \
				--replace \
				--restart no \
			"${CONTENT_IMAGE}"
		eend ${?} "Launching container '${content_name}' from image" \
			"'${CONTENT_IMAGE}' via service '${RC_SVCNAME}'" \
			"failed: ${?}" || return ${?}
	fi
}

start_post() {
	container_svc_wait=60

	_containers_start_post
}

reload() {
	local -i pid=0

	if ! service_started "${RC_SVCNAME}" ; then
		eerror "${RC_SVCNAME} isn't running"
		return 1
	fi

	configtest || return ${?}

	ebegin "Reloading PHP FastCGI Process Manager"
	if [ -s "${PHP_FPM_PID}" ]; then
		: $(( pid = $( cat "${PHP_FPM_PID}" ) ))
	fi
	if [ $(( pid )) -gt 1 ]; then
		kill -USR2 ${pid}
	fi
	eend ${?}
}

sync() {
	if ! service_started "${RC_SVCNAME}" ; then
		eerror "${RC_SVCNAME} isn't running"
		return 1
	fi

	docker exec "${container_name}" \
		/usr/libexec/entrypoint.d/roundcube-sync.sh
}

stop_post() {
	local id=''

	_containers_stop_post

	if [ "${RC_RUNLEVEL:-}" = 'shutdown' ]; then
		if id="$( docker ps -a \
			--filter "name=${content_name}" \
			--format '{{.ID}}' 2>/dev/null
		)" && [ -n "${id:-}" ]; then
			docker rm --volumes "${id}" >/dev/null 2>&1
		fi
	fi

	return 0
}

# vi: set filetype=gentoo-init-d colorcolumn=80:
