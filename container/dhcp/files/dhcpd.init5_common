#!/sbin/openrc-run
# Copyright 1999-2015 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

get_var() {
	local var="${1:-}"
	local default="${2:-}"
	local val=''

	[[ -n "${var}" ]] || return 1

	val="$( sed -n 's/^[[:blank:]]\?'"${var}"' "*\([^#";]\+\).*/\1/p' "${DHCPD_CONF}" )"
	printf '%s' "${val:-${default:-}}"
}

: ${DHCPD_CONF:=/etc/dhcp/${RC_SVCNAME}.conf}

# Work out our cffile if it's in our DHCPD_OPTS
case " ${DHCPD_OPTS} " in
	*" -cf "*)
		DHCPD_CONF=" ${DHCPD_OPTS} "
		DHCPD_CONF="${DHCPD_CONF##* -cf }"
		DHCPD_CONF="${DHCPD_CONF%% *}"
		;;
	*)	DHCPD_OPTS="${DHCPD_OPTS} -cf ${DHCPD_CONF}"
		;;
esac

podman_memory_size='tiny'

PN='dhcp' # PN="${RC_SVCNAME:=dhcp}"
PNV="$( echo "${RC_SVCNAME}" | sed 's/dhcpd/dhcp/' )"
PV='@PVR@'
CATEGORY='net-misc'
container_svc_pid="$( get_var 'pid-file-name' "/var/run/dhcp/${RC_SVCNAME}.pid" )"
command_opts="${DHCPD_OPTS} -q -f -pf \"%PID%\" -lf \"$(
		get_var 'lease-file-name' "/var/lib/dhcp/${RC_SVCNAME}.leases"
	)\" -user dhcp -group dhcp${DHCPD_IFACE:+ ${DHCPD_IFACE}}"

container_dir_owner='dhcp'
container_dir_lib="/var/lib/${PN}"

. /etc/init.d/_containers_common || return ${?}

dockeropts+=(
	#--cap-drop ALL
	--cap-add CHOWN
	--cap-add DAC_OVERRIDE
	--cap-add NET_ADMIN
	--cap-add NET_BIND_SERVICE
	--cap-add NET_BROADCAST
	--cap-add NET_RAW
	--cap-add SETGID
	--cap-add SETUID
)
dockernetwork+=(
	--network host
)
#dockerports+=(
	#--publish 67:67/udp
	#--publish 647:647/udp
	#--publish 647:647/tcp
	#--publish 847:847/udp
	#--publish 847:847/tcp
	#--publish 7911:7911/udp
	#--publish 7911:7911/tcp
#}

dockermounts=( ${dockermount_defaults[@]} )

container_stop_timeout=5

_containers_set_args

#command_user="dhcp:dhcp"
retry="TERM/2/KILL/5"

description="ISC Dynamic Host Configuration Protocol (DHCP) client/server"
extra_commands="checkconfig"
extra_stopped_commands="inspect"
description_checkconfig='Validate the configuration file that will be used by "start"'
description_inspect="Launch container interactively"

required_files="${DHCPD_CONF}"


depend() {
	need containers
	use dns logger
}

_checkpaths() {
	_containers_check_paths || return ${?}

	local leasefile
	leasefile="$( get_var 'lease-file-name' "/var/lib/dhcp/${RC_SVCNAME}.leases" )"
	checkpath --file \
			--owner "${container_dir_owner}:${container_dir_owner}" \
		"${leasefile}" || return ${?}
}

_checkconfig() {
	local rc
	declare -i rc=0

	set -- ${DHCPD_OPTS} -t

	if service_started; then
		docker exec "${container_name}" \
			dhcpd "${@}" >/dev/null 2>&1 || rc=${?}
	else
		docker run "${dockeropts[@]}" "${dockermounts[@]}" \
				--cap-drop ALL \
				--name "${container_name}-checkconfig" \
				--network none \
				--replace \
				--restart no \
				--rm \
			"localhost/${dockerimage}" "${@}" >/dev/null 2>&1 || rc=${?}
	fi
	if [ $(( rc )) -ne 0 ] ; then
		if service_started; then
			docker exec "${container_name}" \
				dhcpd "${@}"
		else
			eerror "${RC_SVCNAME} has detected a syntax error in your configuration files:"
			docker run "${dockeropts[@]}" "${dockermounts[@]}" \
					--cap-drop ALL \
					--name "${container_name}-checkconfig" \
					--network none \
					--replace \
					--restart no \
					--rm \
				"localhost/${dockerimage}" "${@}"
		fi
	fi

	return ${rc}
}

checkconfig() {
	ebegin "Checking ${RC_SVCNAME} configuration"
	_checkconfig
	eend ${?}
}

inspect() {
	_containers_inspect
}

start_pre() {
	container_use_git="${DHCPD_USE_GIT:-}"
	read -r -d '' container_git_ignore <<-EOF

		*.leases
		*.leases~
		*.pid
		*.sample
	EOF

	_checkpaths || return ${?}

	_checkconfig || return ${?}

	_containers_start_pre
}

# vi: set filetype=gentoo-init-d colorcolumn=80:
